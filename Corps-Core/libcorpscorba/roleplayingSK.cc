// This file is generated by omniidl2- omniORB_2_8. Do not edit.
#include "roleplaying.hh"
#include <omniORB2/proxyCall.h>

static const char* _0RL_library_version = omniORB_2_8;


CORBA::Exception::insertExceptionToAny RolePlaying::WrongCookie::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::WrongCookie::insertToAnyFnNCP = 0;

RolePlaying::WrongCookie::WrongCookie(const RolePlaying::WrongCookie &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::WrongCookie & RolePlaying::WrongCookie::operator=(const RolePlaying::WrongCookie& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::WrongCookie::~WrongCookie() {}

void RolePlaying::WrongCookie::_raise() { throw *this; }

RolePlaying::WrongCookie* RolePlaying::WrongCookie::_downcast(CORBA::Exception* e) {
  return (RolePlaying::WrongCookie*)_NP_is_a(e,"Exception/UserException/RolePlaying_WrongCookie");
}

const RolePlaying::WrongCookie* RolePlaying::WrongCookie::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::WrongCookie*)_NP_is_a(e,"Exception/UserException/RolePlaying_WrongCookie");
}

RolePlaying::WrongCookie* RolePlaying::WrongCookie::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::WrongCookie::_NP_duplicate() const {
  return new RolePlaying::WrongCookie(*this);
}

const char* RolePlaying::WrongCookie::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_WrongCookie";
}
size_t
RolePlaying::WrongCookie::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::WrongCookie::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::WrongCookie::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::WrongCookie::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::WrongCookie::operator<<= (MemBufferedStream &_n)
{
}

CORBA::Exception::insertExceptionToAny RolePlaying::UnknownMIMEType::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::UnknownMIMEType::insertToAnyFnNCP = 0;

RolePlaying::UnknownMIMEType::UnknownMIMEType(const RolePlaying::UnknownMIMEType &_s) : CORBA::UserException(_s) 
{
  type = _s.type;
}

RolePlaying::UnknownMIMEType::UnknownMIMEType(const char*  _type)
{
  pd_insertToAnyFn    = RolePlaying::UnknownMIMEType::insertToAnyFn;
  pd_insertToAnyFnNCP = RolePlaying::UnknownMIMEType::insertToAnyFnNCP;
  type = _type;
}

RolePlaying::UnknownMIMEType & RolePlaying::UnknownMIMEType::operator=(const RolePlaying::UnknownMIMEType& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  type = _s.type;
  return *this;
}

RolePlaying::UnknownMIMEType::~UnknownMIMEType() {}

void RolePlaying::UnknownMIMEType::_raise() { throw *this; }

RolePlaying::UnknownMIMEType* RolePlaying::UnknownMIMEType::_downcast(CORBA::Exception* e) {
  return (RolePlaying::UnknownMIMEType*)_NP_is_a(e,"Exception/UserException/RolePlaying_UnknownMIMEType");
}

const RolePlaying::UnknownMIMEType* RolePlaying::UnknownMIMEType::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::UnknownMIMEType*)_NP_is_a(e,"Exception/UserException/RolePlaying_UnknownMIMEType");
}

RolePlaying::UnknownMIMEType* RolePlaying::UnknownMIMEType::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::UnknownMIMEType::_NP_duplicate() const {
  return new RolePlaying::UnknownMIMEType(*this);
}

const char* RolePlaying::UnknownMIMEType::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_UnknownMIMEType";
}
size_t
RolePlaying::UnknownMIMEType::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4
    + (((const char*) type) ? strlen((const char*) type) + 1 : 1);
  return _msgsize;
}

void
RolePlaying::UnknownMIMEType::operator>>= (NetBufferedStream &_n) const
{
  {
    CORBA::ULong _len = (((const char*) type)? strlen((const char*) type) + 1 : 1);
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*) type),_len);
    else {
      if ((const char*) type == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
}

void
RolePlaying::UnknownMIMEType::operator<<= (NetBufferedStream &_n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    type = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
}

void
RolePlaying::UnknownMIMEType::operator>>= (MemBufferedStream &_n) const
{
  {
    CORBA::ULong _len = (((const char*) type)? strlen((const char*) type) + 1 : 1);
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*) type),_len);
    else {
      if ((const char*) type == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
}

void
RolePlaying::UnknownMIMEType::operator<<= (MemBufferedStream &_n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    type = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
}

RolePlaying::Property::~Property () {}

RolePlaying::_sk_Property::~_sk_Property () {}

RolePlaying::_proxy_Property::~_proxy_Property () {}

RolePlaying::_nil_Property::~_nil_Property () {}

RolePlaying::Property_proxyObjectFactory::~Property_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_pc_385b9319d6b95da1_00000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_00000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline char* result() { return pd_result; }

private:
  char* pd_result;
};

void _0RL_pc_385b9319d6b95da1_00000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_pc_385b9319d6b95da1_10000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_10000000(const char* _op, size_t _op_len, const char* arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const char* _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_10000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) _value) ? strlen((const char*) _value) + 1 : 1);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_10000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) _value)? strlen((const char*) _value) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) _value),_len);
    else {
      if ((const char*) _value == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
}

char* RolePlaying::_proxy_Property::type()
{
  _0RL_pc_385b9319d6b95da1_00000000 _call_desc("_get_type", 10);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  _cany
class _0RL_pc_385b9319d6b95da1_20000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_20000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline CORBA::Any* result() { return pd_result; }

private:
  CORBA::Any* pd_result;
};

void _0RL_pc_385b9319d6b95da1_20000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = new CORBA::Any;
  *pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cany
class _0RL_pc_385b9319d6b95da1_30000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_30000000(const char* _op, size_t _op_len, const CORBA::Any& arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const CORBA::Any& _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_30000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = _value.NP_alignedSize(msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_30000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

CORBA::Any* RolePlaying::_proxy_Property::o()
{
  _0RL_pc_385b9319d6b95da1_20000000 _call_desc("_get_o", 7);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



CORBA::Boolean
RolePlaying::_sk_Property::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_type") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result = type();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_o") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::Any_var _0RL_result = o();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_Property::_sk_Property (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Property::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Property_ptr
RolePlaying::Property::_duplicate(RolePlaying::Property_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Property::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Property_ptr
RolePlaying::Property::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Property::_nil();
  RolePlaying::Property_ptr e = (RolePlaying::Property_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Property_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Property::_nil();
}

void *
RolePlaying::Property::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Property_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::Property::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Property_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::Property_ptr
RolePlaying::Property_Helper::_nil() {
  return RolePlaying::Property::_nil();
}

CORBA::Boolean
RolePlaying::Property_Helper::is_nil(RolePlaying::Property_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Property_Helper::release(RolePlaying::Property_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Property_Helper::duplicate(RolePlaying::Property_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Property_Helper::NP_alignedSize(RolePlaying::Property_ptr obj,size_t initialoffset) {
  return RolePlaying::Property::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Property_Helper::marshalObjRef(RolePlaying::Property_ptr obj,NetBufferedStream &s) {
  RolePlaying::Property::marshalObjRef(obj,s);
}

RolePlaying::Property_ptr RolePlaying::Property_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Property::unmarshalObjRef(s);
}

void
RolePlaying::Property_Helper::marshalObjRef(RolePlaying::Property_ptr obj,MemBufferedStream &s) {
  RolePlaying::Property::marshalObjRef(obj,s);
}

RolePlaying::Property_ptr RolePlaying::Property_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Property::unmarshalObjRef(s);
}

const char *
RolePlaying::Property_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Property_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Property_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Property *p = new RolePlaying::_proxy_Property(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Property_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Property::_0RL_is_a(base_repoId);

}

RolePlaying::Property_ptr
RolePlaying::Property::_nil() {
  return RolePlaying::Property_proxyObjectFactory::_nil();
}

static const RolePlaying::Property_proxyObjectFactory RolePlaying_Property_proxyObjectFactory;
RolePlaying::Property_ptr RolePlaying::Property_proxyObjectFactory::__nil_Property = 0;

RolePlaying::Thing::~Thing () {}

RolePlaying::_sk_Thing::~_sk_Thing () {}

RolePlaying::_proxy_Thing::~_proxy_Thing () {}

RolePlaying::_nil_Thing::~_nil_Thing () {}

RolePlaying::Thing_proxyObjectFactory::~Thing_proxyObjectFactory () {}

char* RolePlaying::_proxy_Thing::Name()
{
  _0RL_pc_385b9319d6b95da1_00000000 _call_desc("_get_Name", 10);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  _cRolePlaying_mPropertyList
class _0RL_pc_385b9319d6b95da1_40000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_40000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline RolePlaying::PropertyList* result() { return pd_result; }

private:
  RolePlaying::PropertyList* pd_result;
};

void _0RL_pc_385b9319d6b95da1_40000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = new RolePlaying::PropertyList;
  *pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cRolePlaying_mPropertyList
class _0RL_pc_385b9319d6b95da1_50000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_50000000(const char* _op, size_t _op_len, const RolePlaying::PropertyList& arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const RolePlaying::PropertyList& _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_50000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = _value.NP_alignedSize(msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_50000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

RolePlaying::PropertyList* RolePlaying::_proxy_Thing::Properties()
{
  _0RL_pc_385b9319d6b95da1_40000000 _call_desc("_get_Properties", 16);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



CORBA::Boolean
RolePlaying::_sk_Thing::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_Name") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result = Name();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_Properties") == 0)
  {
    _0RL_s.RequestReceived();
    PropertyList_var _0RL_result = Properties();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_Thing::_sk_Thing (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Thing::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Thing_ptr
RolePlaying::Thing::_duplicate(RolePlaying::Thing_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Thing::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Thing_ptr
RolePlaying::Thing::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Thing::_nil();
  RolePlaying::Thing_ptr e = (RolePlaying::Thing_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Thing_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Thing::_nil();
}

void *
RolePlaying::Thing::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Thing_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::Thing::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Thing_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::Thing_ptr
RolePlaying::Thing_Helper::_nil() {
  return RolePlaying::Thing::_nil();
}

CORBA::Boolean
RolePlaying::Thing_Helper::is_nil(RolePlaying::Thing_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Thing_Helper::release(RolePlaying::Thing_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Thing_Helper::duplicate(RolePlaying::Thing_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Thing_Helper::NP_alignedSize(RolePlaying::Thing_ptr obj,size_t initialoffset) {
  return RolePlaying::Thing::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Thing_Helper::marshalObjRef(RolePlaying::Thing_ptr obj,NetBufferedStream &s) {
  RolePlaying::Thing::marshalObjRef(obj,s);
}

RolePlaying::Thing_ptr RolePlaying::Thing_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Thing::unmarshalObjRef(s);
}

void
RolePlaying::Thing_Helper::marshalObjRef(RolePlaying::Thing_ptr obj,MemBufferedStream &s) {
  RolePlaying::Thing::marshalObjRef(obj,s);
}

RolePlaying::Thing_ptr RolePlaying::Thing_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Thing::unmarshalObjRef(s);
}

const char *
RolePlaying::Thing_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Thing_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Thing_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Thing *p = new RolePlaying::_proxy_Thing(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Thing_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Thing::_0RL_is_a(base_repoId);

}

RolePlaying::Thing_ptr
RolePlaying::Thing::_nil() {
  return RolePlaying::Thing_proxyObjectFactory::_nil();
}

static const RolePlaying::Thing_proxyObjectFactory RolePlaying_Thing_proxyObjectFactory;
RolePlaying::Thing_ptr RolePlaying::Thing_proxyObjectFactory::__nil_Thing = 0;

RolePlaying::Container::~Container () {}

RolePlaying::_sk_Container::~_sk_Container () {}

RolePlaying::_proxy_Container::~_proxy_Container () {}

RolePlaying::_nil_Container::~_nil_Container () {}

RolePlaying::Container_proxyObjectFactory::~Container_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  _cRolePlaying_mThingList
class _0RL_pc_385b9319d6b95da1_60000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_60000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline RolePlaying::ThingList* result() { return pd_result; }

private:
  RolePlaying::ThingList* pd_result;
};

void _0RL_pc_385b9319d6b95da1_60000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = new RolePlaying::ThingList;
  *pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cRolePlaying_mThingList
class _0RL_pc_385b9319d6b95da1_70000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_70000000(const char* _op, size_t _op_len, const RolePlaying::ThingList& arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const RolePlaying::ThingList& _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_70000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = _value.NP_alignedSize(msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_70000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

RolePlaying::ThingList* RolePlaying::_proxy_Container::containing()
{
  _0RL_pc_385b9319d6b95da1_60000000 _call_desc("_get_containing", 16);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



CORBA::Boolean
RolePlaying::_sk_Container::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_containing") == 0)
  {
    _0RL_s.RequestReceived();
    ThingList_var _0RL_result = containing();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_Thing::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_Container::_sk_Container (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Container::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Container_ptr
RolePlaying::Container::_duplicate(RolePlaying::Container_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Container::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Container_ptr
RolePlaying::Container::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Container::_nil();
  RolePlaying::Container_ptr e = (RolePlaying::Container_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Container_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Container::_nil();
}

void *
RolePlaying::Container::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Container_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = Thing::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::Container::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Container_IntfRepoID)==0)
    return 1;
  else if (Thing::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::Container_ptr
RolePlaying::Container_Helper::_nil() {
  return RolePlaying::Container::_nil();
}

CORBA::Boolean
RolePlaying::Container_Helper::is_nil(RolePlaying::Container_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Container_Helper::release(RolePlaying::Container_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Container_Helper::duplicate(RolePlaying::Container_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Container_Helper::NP_alignedSize(RolePlaying::Container_ptr obj,size_t initialoffset) {
  return RolePlaying::Container::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Container_Helper::marshalObjRef(RolePlaying::Container_ptr obj,NetBufferedStream &s) {
  RolePlaying::Container::marshalObjRef(obj,s);
}

RolePlaying::Container_ptr RolePlaying::Container_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Container::unmarshalObjRef(s);
}

void
RolePlaying::Container_Helper::marshalObjRef(RolePlaying::Container_ptr obj,MemBufferedStream &s) {
  RolePlaying::Container::marshalObjRef(obj,s);
}

RolePlaying::Container_ptr RolePlaying::Container_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Container::unmarshalObjRef(s);
}

const char *
RolePlaying::Container_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Container_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Container_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Container *p = new RolePlaying::_proxy_Container(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Container_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Container::_0RL_is_a(base_repoId);

}

RolePlaying::Container_ptr
RolePlaying::Container::_nil() {
  return RolePlaying::Container_proxyObjectFactory::_nil();
}

static const RolePlaying::Container_proxyObjectFactory RolePlaying_Container_proxyObjectFactory;
RolePlaying::Container_ptr RolePlaying::Container_proxyObjectFactory::__nil_Container = 0;

RolePlaying::Character::~Character () {}

RolePlaying::_sk_Character::~_sk_Character () {}

RolePlaying::_proxy_Character::~_proxy_Character () {}

RolePlaying::_nil_Character::~_nil_Character () {}

RolePlaying::Character_proxyObjectFactory::~Character_proxyObjectFactory () {}

RolePlaying::ThingList* RolePlaying::_proxy_Character::Inventory()
{
  _0RL_pc_385b9319d6b95da1_60000000 _call_desc("_get_Inventory", 15);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



CORBA::Boolean
RolePlaying::_sk_Character::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_Inventory") == 0)
  {
    _0RL_s.RequestReceived();
    ThingList_var _0RL_result = Inventory();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_Thing::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_Character::_sk_Character (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Character::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Character_ptr
RolePlaying::Character::_duplicate(RolePlaying::Character_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Character::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Character_ptr
RolePlaying::Character::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Character::_nil();
  RolePlaying::Character_ptr e = (RolePlaying::Character_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Character_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Character::_nil();
}

void *
RolePlaying::Character::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Character_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = Thing::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::Character::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Character_IntfRepoID)==0)
    return 1;
  else if (Thing::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::Character_ptr
RolePlaying::Character_Helper::_nil() {
  return RolePlaying::Character::_nil();
}

CORBA::Boolean
RolePlaying::Character_Helper::is_nil(RolePlaying::Character_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Character_Helper::release(RolePlaying::Character_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Character_Helper::duplicate(RolePlaying::Character_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Character_Helper::NP_alignedSize(RolePlaying::Character_ptr obj,size_t initialoffset) {
  return RolePlaying::Character::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Character_Helper::marshalObjRef(RolePlaying::Character_ptr obj,NetBufferedStream &s) {
  RolePlaying::Character::marshalObjRef(obj,s);
}

RolePlaying::Character_ptr RolePlaying::Character_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Character::unmarshalObjRef(s);
}

void
RolePlaying::Character_Helper::marshalObjRef(RolePlaying::Character_ptr obj,MemBufferedStream &s) {
  RolePlaying::Character::marshalObjRef(obj,s);
}

RolePlaying::Character_ptr RolePlaying::Character_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Character::unmarshalObjRef(s);
}

const char *
RolePlaying::Character_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Character_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Character_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Character *p = new RolePlaying::_proxy_Character(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Character_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Character::_0RL_is_a(base_repoId);

}

RolePlaying::Character_ptr
RolePlaying::Character::_nil() {
  return RolePlaying::Character_proxyObjectFactory::_nil();
}

static const RolePlaying::Character_proxyObjectFactory RolePlaying_Character_proxyObjectFactory;
RolePlaying::Character_ptr RolePlaying::Character_proxyObjectFactory::__nil_Character = 0;

size_t
RolePlaying::Map::Position_s::NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  return _msgsize;
}

void
RolePlaying::Map::Position_s::operator>>= (NetBufferedStream &_n) const
{
  xpos >>= _n;
  ypos >>= _n;
}

void
RolePlaying::Map::Position_s::operator<<= (NetBufferedStream &_n)
{
  xpos <<= _n;
  ypos <<= _n;
}

void
RolePlaying::Map::Position_s::operator>>= (MemBufferedStream &_n) const
{
  xpos >>= _n;
  ypos >>= _n;
}

void
RolePlaying::Map::Position_s::operator<<= (MemBufferedStream &_n)
{
  xpos <<= _n;
  ypos <<= _n;
}

const CORBA::UShort RolePlaying::Map::FT_Unknown _init_in_cldef_(  = 0 );
const CORBA::UShort RolePlaying::Map::FT_Nothing _init_in_cldef_(  = 1 );
const CORBA::UShort RolePlaying::Map::FT_Unseen _init_in_cldef_(  = 2 );
const CORBA::UShort RolePlaying::Map::FT_User _init_in_cldef_(  = 256 );
const CORBA::UShort RolePlaying::Map::FF_Invisible _init_in_cldef_(  = 1 );
const CORBA::UShort RolePlaying::Map::MT_Unknown _init_in_cldef_(  = 0 );
const CORBA::UShort RolePlaying::Map::MT_User _init_in_cldef_(  = 256 );
const CORBA::UShort RolePlaying::Map::MF_HasObject _init_in_cldef_(  = 1 );
size_t
RolePlaying::Map::Modifier::NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = o.NP_alignedSize(_msgsize);
  return _msgsize;
}

void
RolePlaying::Map::Modifier::operator>>= (NetBufferedStream &_n) const
{
  type >>= _n;
  flags >>= _n;
  o >>= _n;
}

void
RolePlaying::Map::Modifier::operator<<= (NetBufferedStream &_n)
{
  type <<= _n;
  flags <<= _n;
  o <<= _n;
}

void
RolePlaying::Map::Modifier::operator>>= (MemBufferedStream &_n) const
{
  type >>= _n;
  flags >>= _n;
  o >>= _n;
}

void
RolePlaying::Map::Modifier::operator<<= (MemBufferedStream &_n)
{
  type <<= _n;
  flags <<= _n;
  o <<= _n;
}

size_t
RolePlaying::Map::Field::NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = pos.NP_alignedSize(_msgsize);
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = ModifierList.NP_alignedSize(_msgsize);
  return _msgsize;
}

void
RolePlaying::Map::Field::operator>>= (NetBufferedStream &_n) const
{
  pos >>= _n;
  type >>= _n;
  flags >>= _n;
  ModifierList >>= _n;
}

void
RolePlaying::Map::Field::operator<<= (NetBufferedStream &_n)
{
  pos <<= _n;
  type <<= _n;
  flags <<= _n;
  ModifierList <<= _n;
}

void
RolePlaying::Map::Field::operator>>= (MemBufferedStream &_n) const
{
  pos >>= _n;
  type >>= _n;
  flags >>= _n;
  ModifierList >>= _n;
}

void
RolePlaying::Map::Field::operator<<= (MemBufferedStream &_n)
{
  pos <<= _n;
  type <<= _n;
  flags <<= _n;
  ModifierList <<= _n;
}

size_t
RolePlaying::Map::PackedField::NP_alignedSize(size_t _initialoffset) const
{
  CORBA::ULong _msgsize = _initialoffset;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_2) + 2;
  _msgsize = ModifierList.NP_alignedSize(_msgsize);
  return _msgsize;
}

void
RolePlaying::Map::PackedField::operator>>= (NetBufferedStream &_n) const
{
  type >>= _n;
  flags >>= _n;
  ModifierList >>= _n;
}

void
RolePlaying::Map::PackedField::operator<<= (NetBufferedStream &_n)
{
  type <<= _n;
  flags <<= _n;
  ModifierList <<= _n;
}

void
RolePlaying::Map::PackedField::operator>>= (MemBufferedStream &_n) const
{
  type >>= _n;
  flags >>= _n;
  ModifierList >>= _n;
}

void
RolePlaying::Map::PackedField::operator<<= (MemBufferedStream &_n)
{
  type <<= _n;
  flags <<= _n;
  ModifierList <<= _n;
}

RolePlaying::Map::~Map () {}

RolePlaying::_sk_Map::~_sk_Map () {}

RolePlaying::_proxy_Map::~_proxy_Map () {}

RolePlaying::_nil_Map::~_nil_Map () {}

RolePlaying::Map_proxyObjectFactory::~Map_proxyObjectFactory () {}


CORBA::Boolean
RolePlaying::_sk_Map::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  return 0;
}

RolePlaying::_sk_Map::_sk_Map (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Map::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Map_ptr
RolePlaying::Map::_duplicate(RolePlaying::Map_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Map::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Map_ptr
RolePlaying::Map::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Map::_nil();
  RolePlaying::Map_ptr e = (RolePlaying::Map_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Map_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Map::_nil();
}

void *
RolePlaying::Map::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Map_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::Map::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Map_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::Map_ptr
RolePlaying::Map_Helper::_nil() {
  return RolePlaying::Map::_nil();
}

CORBA::Boolean
RolePlaying::Map_Helper::is_nil(RolePlaying::Map_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Map_Helper::release(RolePlaying::Map_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Map_Helper::duplicate(RolePlaying::Map_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Map_Helper::NP_alignedSize(RolePlaying::Map_ptr obj,size_t initialoffset) {
  return RolePlaying::Map::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Map_Helper::marshalObjRef(RolePlaying::Map_ptr obj,NetBufferedStream &s) {
  RolePlaying::Map::marshalObjRef(obj,s);
}

RolePlaying::Map_ptr RolePlaying::Map_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Map::unmarshalObjRef(s);
}

void
RolePlaying::Map_Helper::marshalObjRef(RolePlaying::Map_ptr obj,MemBufferedStream &s) {
  RolePlaying::Map::marshalObjRef(obj,s);
}

RolePlaying::Map_ptr RolePlaying::Map_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Map::unmarshalObjRef(s);
}

const char *
RolePlaying::Map_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Map_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Map_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Map *p = new RolePlaying::_proxy_Map(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Map_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Map::_0RL_is_a(base_repoId);

}

RolePlaying::Map_ptr
RolePlaying::Map::_nil() {
  return RolePlaying::Map_proxyObjectFactory::_nil();
}

static const RolePlaying::Map_proxyObjectFactory RolePlaying_Map_proxyObjectFactory;
RolePlaying::Map_ptr RolePlaying::Map_proxyObjectFactory::__nil_Map = 0;

RolePlaying::ServerHandler::~ServerHandler () {}

RolePlaying::_sk_ServerHandler::~_sk_ServerHandler () {}

RolePlaying::_proxy_ServerHandler::~_proxy_ServerHandler () {}

RolePlaying::_nil_ServerHandler::~_nil_ServerHandler () {}

RolePlaying::ServerHandler_proxyObjectFactory::~ServerHandler_proxyObjectFactory () {}


CORBA::Boolean
RolePlaying::_sk_ServerHandler::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  return 0;
}

RolePlaying::_sk_ServerHandler::_sk_ServerHandler (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_ServerHandler::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::ServerHandler_ptr
RolePlaying::ServerHandler::_duplicate(RolePlaying::ServerHandler_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::ServerHandler::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::ServerHandler_ptr
RolePlaying::ServerHandler::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::ServerHandler::_nil();
  RolePlaying::ServerHandler_ptr e = (RolePlaying::ServerHandler_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_ServerHandler_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::ServerHandler::_nil();
}

void *
RolePlaying::ServerHandler::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_ServerHandler_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::ServerHandler::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_ServerHandler_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::ServerHandler_ptr
RolePlaying::ServerHandler_Helper::_nil() {
  return RolePlaying::ServerHandler::_nil();
}

CORBA::Boolean
RolePlaying::ServerHandler_Helper::is_nil(RolePlaying::ServerHandler_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::ServerHandler_Helper::release(RolePlaying::ServerHandler_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::ServerHandler_Helper::duplicate(RolePlaying::ServerHandler_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::ServerHandler_Helper::NP_alignedSize(RolePlaying::ServerHandler_ptr obj,size_t initialoffset) {
  return RolePlaying::ServerHandler::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::ServerHandler_Helper::marshalObjRef(RolePlaying::ServerHandler_ptr obj,NetBufferedStream &s) {
  RolePlaying::ServerHandler::marshalObjRef(obj,s);
}

RolePlaying::ServerHandler_ptr RolePlaying::ServerHandler_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::ServerHandler::unmarshalObjRef(s);
}

void
RolePlaying::ServerHandler_Helper::marshalObjRef(RolePlaying::ServerHandler_ptr obj,MemBufferedStream &s) {
  RolePlaying::ServerHandler::marshalObjRef(obj,s);
}

RolePlaying::ServerHandler_ptr RolePlaying::ServerHandler_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::ServerHandler::unmarshalObjRef(s);
}

const char *
RolePlaying::ServerHandler_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_ServerHandler_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::ServerHandler_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_ServerHandler *p = new RolePlaying::_proxy_ServerHandler(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::ServerHandler_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::ServerHandler::_0RL_is_a(base_repoId);

}

RolePlaying::ServerHandler_ptr
RolePlaying::ServerHandler::_nil() {
  return RolePlaying::ServerHandler_proxyObjectFactory::_nil();
}

static const RolePlaying::ServerHandler_proxyObjectFactory RolePlaying_ServerHandler_proxyObjectFactory;
RolePlaying::ServerHandler_ptr RolePlaying::ServerHandler_proxyObjectFactory::__nil_ServerHandler = 0;

RolePlaying::SH_Receiver::~SH_Receiver () {}

RolePlaying::_sk_SH_Receiver::~_sk_SH_Receiver () {}

RolePlaying::_proxy_SH_Receiver::~_proxy_SH_Receiver () {}

RolePlaying::_nil_SH_Receiver::~_nil_SH_Receiver () {}

RolePlaying::SH_Receiver_proxyObjectFactory::~SH_Receiver_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cany
class _0RL_pc_385b9319d6b95da1_80000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_80000000(const char* _op, size_t _op_len, const char* _a_what, const CORBA::Any& _a_data) :
    OmniProxyCallDescWithContext(_op, _op_len),
    arg_what(_a_what),
    arg_data(_a_data)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const char* arg_what;
  const CORBA::Any& arg_data;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_80000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_what) ? strlen((const char*) arg_what) + 1 : 1);
  msgsize = arg_data.NP_alignedSize(msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_80000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_what)? strlen((const char*) arg_what) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_what),_len);
    else {
      if ((const char*) arg_what == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_data >>= giop_client;
}

static const char* _0RL_ctx_385b9319d6b95da1_90000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_SH_Receiver::transmit(const char*  what, const CORBA::Any & data,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_80000000 _call_desc("transmit", 9, what, data);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_90000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_SH_Receiver::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"transmit") == 0)
  {
    CORBA::String_var what;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      what = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Any data;
    data <<= _0RL_s;
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        transmit(what, data, ctxt);
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ServerHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_SH_Receiver::_sk_SH_Receiver (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_SH_Receiver::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::SH_Receiver_ptr
RolePlaying::SH_Receiver::_duplicate(RolePlaying::SH_Receiver_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::SH_Receiver::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::SH_Receiver_ptr
RolePlaying::SH_Receiver::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::SH_Receiver::_nil();
  RolePlaying::SH_Receiver_ptr e = (RolePlaying::SH_Receiver_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_SH_Receiver_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::SH_Receiver::_nil();
}

void *
RolePlaying::SH_Receiver::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_SH_Receiver_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ServerHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::SH_Receiver::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_SH_Receiver_IntfRepoID)==0)
    return 1;
  else if (ServerHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::SH_Receiver_ptr
RolePlaying::SH_Receiver_Helper::_nil() {
  return RolePlaying::SH_Receiver::_nil();
}

CORBA::Boolean
RolePlaying::SH_Receiver_Helper::is_nil(RolePlaying::SH_Receiver_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::SH_Receiver_Helper::release(RolePlaying::SH_Receiver_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::SH_Receiver_Helper::duplicate(RolePlaying::SH_Receiver_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::SH_Receiver_Helper::NP_alignedSize(RolePlaying::SH_Receiver_ptr obj,size_t initialoffset) {
  return RolePlaying::SH_Receiver::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::SH_Receiver_Helper::marshalObjRef(RolePlaying::SH_Receiver_ptr obj,NetBufferedStream &s) {
  RolePlaying::SH_Receiver::marshalObjRef(obj,s);
}

RolePlaying::SH_Receiver_ptr RolePlaying::SH_Receiver_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::SH_Receiver::unmarshalObjRef(s);
}

void
RolePlaying::SH_Receiver_Helper::marshalObjRef(RolePlaying::SH_Receiver_ptr obj,MemBufferedStream &s) {
  RolePlaying::SH_Receiver::marshalObjRef(obj,s);
}

RolePlaying::SH_Receiver_ptr RolePlaying::SH_Receiver_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::SH_Receiver::unmarshalObjRef(s);
}

const char *
RolePlaying::SH_Receiver_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_SH_Receiver_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::SH_Receiver_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_SH_Receiver *p = new RolePlaying::_proxy_SH_Receiver(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::SH_Receiver_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::SH_Receiver::_0RL_is_a(base_repoId);

}

RolePlaying::SH_Receiver_ptr
RolePlaying::SH_Receiver::_nil() {
  return RolePlaying::SH_Receiver_proxyObjectFactory::_nil();
}

static const RolePlaying::SH_Receiver_proxyObjectFactory RolePlaying_SH_Receiver_proxyObjectFactory;
RolePlaying::SH_Receiver_ptr RolePlaying::SH_Receiver_proxyObjectFactory::__nil_SH_Receiver = 0;

CORBA::Exception::insertExceptionToAny RolePlaying::ClientHandler::NoSuchHandler::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::ClientHandler::NoSuchHandler::insertToAnyFnNCP = 0;

RolePlaying::ClientHandler::NoSuchHandler::NoSuchHandler(const RolePlaying::ClientHandler::NoSuchHandler &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::ClientHandler::NoSuchHandler & RolePlaying::ClientHandler::NoSuchHandler::operator=(const RolePlaying::ClientHandler::NoSuchHandler& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::ClientHandler::NoSuchHandler::~NoSuchHandler() {}

void RolePlaying::ClientHandler::NoSuchHandler::_raise() { throw *this; }

RolePlaying::ClientHandler::NoSuchHandler* RolePlaying::ClientHandler::NoSuchHandler::_downcast(CORBA::Exception* e) {
  return (RolePlaying::ClientHandler::NoSuchHandler*)_NP_is_a(e,"Exception/UserException/RolePlaying_ClientHandler_NoSuchHandler");
}

const RolePlaying::ClientHandler::NoSuchHandler* RolePlaying::ClientHandler::NoSuchHandler::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::ClientHandler::NoSuchHandler*)_NP_is_a(e,"Exception/UserException/RolePlaying_ClientHandler_NoSuchHandler");
}

RolePlaying::ClientHandler::NoSuchHandler* RolePlaying::ClientHandler::NoSuchHandler::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::ClientHandler::NoSuchHandler::_NP_duplicate() const {
  return new RolePlaying::ClientHandler::NoSuchHandler(*this);
}

const char* RolePlaying::ClientHandler::NoSuchHandler::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_ClientHandler_NoSuchHandler";
}
size_t
RolePlaying::ClientHandler::NoSuchHandler::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::ClientHandler::NoSuchHandler::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::ClientHandler::NoSuchHandler::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::ClientHandler::NoSuchHandler::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::ClientHandler::NoSuchHandler::operator<<= (MemBufferedStream &_n)
{
}

CORBA::Exception::insertExceptionToAny RolePlaying::ClientHandler::HandlerNotActive::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::ClientHandler::HandlerNotActive::insertToAnyFnNCP = 0;

RolePlaying::ClientHandler::HandlerNotActive::HandlerNotActive(const RolePlaying::ClientHandler::HandlerNotActive &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::ClientHandler::HandlerNotActive & RolePlaying::ClientHandler::HandlerNotActive::operator=(const RolePlaying::ClientHandler::HandlerNotActive& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::ClientHandler::HandlerNotActive::~HandlerNotActive() {}

void RolePlaying::ClientHandler::HandlerNotActive::_raise() { throw *this; }

RolePlaying::ClientHandler::HandlerNotActive* RolePlaying::ClientHandler::HandlerNotActive::_downcast(CORBA::Exception* e) {
  return (RolePlaying::ClientHandler::HandlerNotActive*)_NP_is_a(e,"Exception/UserException/RolePlaying_ClientHandler_HandlerNotActive");
}

const RolePlaying::ClientHandler::HandlerNotActive* RolePlaying::ClientHandler::HandlerNotActive::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::ClientHandler::HandlerNotActive*)_NP_is_a(e,"Exception/UserException/RolePlaying_ClientHandler_HandlerNotActive");
}

RolePlaying::ClientHandler::HandlerNotActive* RolePlaying::ClientHandler::HandlerNotActive::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::ClientHandler::HandlerNotActive::_NP_duplicate() const {
  return new RolePlaying::ClientHandler::HandlerNotActive(*this);
}

const char* RolePlaying::ClientHandler::HandlerNotActive::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_ClientHandler_HandlerNotActive";
}
size_t
RolePlaying::ClientHandler::HandlerNotActive::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::ClientHandler::HandlerNotActive::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::ClientHandler::HandlerNotActive::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::ClientHandler::HandlerNotActive::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::ClientHandler::HandlerNotActive::operator<<= (MemBufferedStream &_n)
{
}

RolePlaying::ClientHandler::~ClientHandler () {}

RolePlaying::_sk_ClientHandler::~_sk_ClientHandler () {}

RolePlaying::_proxy_ClientHandler::~_proxy_ClientHandler () {}

RolePlaying::_nil_ClientHandler::~_nil_ClientHandler () {}

RolePlaying::ClientHandler_proxyObjectFactory::~ClientHandler_proxyObjectFactory () {}

void RolePlaying::_proxy_ClientHandler::enable()
{
  OmniProxyCallWrapper::void_call _call_desc("enable", 7);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



void RolePlaying::_proxy_ClientHandler::disable()
{
  OmniProxyCallWrapper::void_call _call_desc("disable", 8);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_ClientHandler::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"enable") == 0)
  {
    _0RL_s.RequestReceived();
        enable();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"disable") == 0)
  {
    _0RL_s.RequestReceived();
        disable();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_ClientHandler::_sk_ClientHandler (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_ClientHandler::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::ClientHandler_ptr
RolePlaying::ClientHandler::_duplicate(RolePlaying::ClientHandler_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::ClientHandler::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::ClientHandler_ptr
RolePlaying::ClientHandler::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::ClientHandler::_nil();
  RolePlaying::ClientHandler_ptr e = (RolePlaying::ClientHandler_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_ClientHandler_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::ClientHandler::_nil();
}

void *
RolePlaying::ClientHandler::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_ClientHandler_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::ClientHandler::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_ClientHandler_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::ClientHandler_ptr
RolePlaying::ClientHandler_Helper::_nil() {
  return RolePlaying::ClientHandler::_nil();
}

CORBA::Boolean
RolePlaying::ClientHandler_Helper::is_nil(RolePlaying::ClientHandler_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::ClientHandler_Helper::release(RolePlaying::ClientHandler_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::ClientHandler_Helper::duplicate(RolePlaying::ClientHandler_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::ClientHandler_Helper::NP_alignedSize(RolePlaying::ClientHandler_ptr obj,size_t initialoffset) {
  return RolePlaying::ClientHandler::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::ClientHandler_Helper::marshalObjRef(RolePlaying::ClientHandler_ptr obj,NetBufferedStream &s) {
  RolePlaying::ClientHandler::marshalObjRef(obj,s);
}

RolePlaying::ClientHandler_ptr RolePlaying::ClientHandler_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::ClientHandler::unmarshalObjRef(s);
}

void
RolePlaying::ClientHandler_Helper::marshalObjRef(RolePlaying::ClientHandler_ptr obj,MemBufferedStream &s) {
  RolePlaying::ClientHandler::marshalObjRef(obj,s);
}

RolePlaying::ClientHandler_ptr RolePlaying::ClientHandler_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::ClientHandler::unmarshalObjRef(s);
}

const char *
RolePlaying::ClientHandler_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_ClientHandler_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::ClientHandler_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_ClientHandler *p = new RolePlaying::_proxy_ClientHandler(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::ClientHandler_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::ClientHandler::_0RL_is_a(base_repoId);

}

RolePlaying::ClientHandler_ptr
RolePlaying::ClientHandler::_nil() {
  return RolePlaying::ClientHandler_proxyObjectFactory::_nil();
}

static const RolePlaying::ClientHandler_proxyObjectFactory RolePlaying_ClientHandler_proxyObjectFactory;
RolePlaying::ClientHandler_ptr RolePlaying::ClientHandler_proxyObjectFactory::__nil_ClientHandler = 0;

RolePlaying::CH_Display::~CH_Display () {}

RolePlaying::_sk_CH_Display::~_sk_CH_Display () {}

RolePlaying::_proxy_CH_Display::~_proxy_CH_Display () {}

RolePlaying::_nil_CH_Display::~_nil_CH_Display () {}

RolePlaying::CH_Display_proxyObjectFactory::~CH_Display_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  _cRolePlaying_mMIMEList
class _0RL_pc_385b9319d6b95da1_a0000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_a0000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline RolePlaying::MIMEList* result() { return pd_result; }

private:
  RolePlaying::MIMEList* pd_result;
};

void _0RL_pc_385b9319d6b95da1_a0000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = new RolePlaying::MIMEList;
  *pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cRolePlaying_mMIMEList
class _0RL_pc_385b9319d6b95da1_b0000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_b0000000(const char* _op, size_t _op_len, const RolePlaying::MIMEList& arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const RolePlaying::MIMEList& _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_b0000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = _value.NP_alignedSize(msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_b0000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

RolePlaying::MIMEList* RolePlaying::_proxy_CH_Display::SupportedMIME()
{
  _0RL_pc_385b9319d6b95da1_a0000000 _call_desc("_get_SupportedMIME", 19);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


void RolePlaying::_proxy_CH_Display::show()
{
  OmniProxyCallWrapper::void_call _call_desc("show", 5);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



// Proxy call descriptor class. Mangled signature:
//  void_i_coctet_i_cboolean
class _0RL_pc_385b9319d6b95da1_c0000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_c0000000(const char* _op, size_t _op_len, CORBA::Octet _a_data, CORBA::Boolean _a_repeat) :
    OmniProxyCallDescWithContext(_op, _op_len),
    arg_data(_a_data),
    arg_repeat(_a_repeat)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  CORBA::Octet arg_data;
  CORBA::Boolean arg_repeat;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_c0000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize += 1;
  msgsize += 1;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_c0000000::marshalArguments(GIOP_C& giop_client)
{
  arg_data >>= giop_client;
  arg_repeat >>= giop_client;
}

static const char* _0RL_ctx_385b9319d6b95da1_d0000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_Display::play(CORBA::Octet  data, CORBA::Boolean  repeat,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_c0000000 _call_desc("play", 5, data, repeat);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_d0000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



void RolePlaying::_proxy_CH_Display::clear()
{
  OmniProxyCallWrapper::void_call _call_desc("clear", 6);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_CH_Display::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_SupportedMIME") == 0)
  {
    _0RL_s.RequestReceived();
    MIMEList_var _0RL_result = SupportedMIME();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"show") == 0)
  {
    _0RL_s.RequestReceived();
        show();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"play") == 0)
  {
    CORBA::Octet data;
    data <<= _0RL_s;
    CORBA::Boolean repeat;
    repeat <<= _0RL_s;
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        play(data, repeat, ctxt);
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"clear") == 0)
  {
    _0RL_s.RequestReceived();
        clear();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_Display::_sk_CH_Display (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_Display::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_Display_ptr
RolePlaying::CH_Display::_duplicate(RolePlaying::CH_Display_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Display::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_Display_ptr
RolePlaying::CH_Display::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Display::_nil();
  RolePlaying::CH_Display_ptr e = (RolePlaying::CH_Display_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_Display_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_Display::_nil();
}

void *
RolePlaying::CH_Display::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_Display_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_Display::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_Display_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_Display_ptr
RolePlaying::CH_Display_Helper::_nil() {
  return RolePlaying::CH_Display::_nil();
}

CORBA::Boolean
RolePlaying::CH_Display_Helper::is_nil(RolePlaying::CH_Display_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_Display_Helper::release(RolePlaying::CH_Display_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_Display_Helper::duplicate(RolePlaying::CH_Display_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_Display_Helper::NP_alignedSize(RolePlaying::CH_Display_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_Display::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_Display_Helper::marshalObjRef(RolePlaying::CH_Display_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_Display::marshalObjRef(obj,s);
}

RolePlaying::CH_Display_ptr RolePlaying::CH_Display_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_Display::unmarshalObjRef(s);
}

void
RolePlaying::CH_Display_Helper::marshalObjRef(RolePlaying::CH_Display_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_Display::marshalObjRef(obj,s);
}

RolePlaying::CH_Display_ptr RolePlaying::CH_Display_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_Display::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_Display_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_Display_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_Display_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_Display *p = new RolePlaying::_proxy_CH_Display(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_Display_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_Display::_0RL_is_a(base_repoId);

}

RolePlaying::CH_Display_ptr
RolePlaying::CH_Display::_nil() {
  return RolePlaying::CH_Display_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_Display_proxyObjectFactory RolePlaying_CH_Display_proxyObjectFactory;
RolePlaying::CH_Display_ptr RolePlaying::CH_Display_proxyObjectFactory::__nil_CH_Display = 0;

RolePlaying::CH_Popup::~CH_Popup () {}

RolePlaying::_sk_CH_Popup::~_sk_CH_Popup () {}

RolePlaying::_proxy_CH_Popup::~_proxy_CH_Popup () {}

RolePlaying::_nil_CH_Popup::~_nil_CH_Popup () {}

RolePlaying::CH_Popup_proxyObjectFactory::~CH_Popup_proxyObjectFactory () {}

RolePlaying::MIMEList* RolePlaying::_proxy_CH_Popup::SupportedMIME()
{
  _0RL_pc_385b9319d6b95da1_a0000000 _call_desc("_get_SupportedMIME", 19);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_coctet
class _0RL_pc_385b9319d6b95da1_e0000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_e0000000(const char* _op, size_t _op_len, const char* _a_mime, CORBA::Octet _a_data) :
    OmniProxyCallDescWithContext(_op, _op_len),
    arg_mime(_a_mime),
    arg_data(_a_data)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const char* arg_mime;
  CORBA::Octet arg_data;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_e0000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_mime) ? strlen((const char*) arg_mime) + 1 : 1);
  msgsize += 1;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_e0000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_mime)? strlen((const char*) arg_mime) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_mime),_len);
    else {
      if ((const char*) arg_mime == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_data >>= giop_client;
}

static const char* _0RL_ctx_385b9319d6b95da1_f0000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_Popup::show(const char*  mime, CORBA::Octet  data,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_e0000000 _call_desc("show", 5, mime, data);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_f0000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_coctet_i_cboolean
class _0RL_pc_385b9319d6b95da1_01000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_01000000(const char* _op, size_t _op_len, const char* _a_mime, CORBA::Octet _a_data, CORBA::Boolean _a_repeat) :
    OmniProxyCallDescWithContext(_op, _op_len),
    arg_mime(_a_mime),
    arg_data(_a_data),
    arg_repeat(_a_repeat)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const char* arg_mime;
  CORBA::Octet arg_data;
  CORBA::Boolean arg_repeat;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_01000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_mime) ? strlen((const char*) arg_mime) + 1 : 1);
  msgsize += 1;
  msgsize += 1;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_01000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_mime)? strlen((const char*) arg_mime) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_mime),_len);
    else {
      if ((const char*) arg_mime == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_data >>= giop_client;
  arg_repeat >>= giop_client;
}

static const char* _0RL_ctx_385b9319d6b95da1_11000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_Popup::play(const char*  mime, CORBA::Octet  data, CORBA::Boolean  repeat,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_01000000 _call_desc("play", 5, mime, data, repeat);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_11000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_CH_Popup::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_SupportedMIME") == 0)
  {
    _0RL_s.RequestReceived();
    MIMEList_var _0RL_result = SupportedMIME();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"show") == 0)
  {
    CORBA::String_var mime;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      mime = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Octet data;
    data <<= _0RL_s;
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        show(mime, data, ctxt);
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"play") == 0)
  {
    CORBA::String_var mime;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      mime = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Octet data;
    data <<= _0RL_s;
    CORBA::Boolean repeat;
    repeat <<= _0RL_s;
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        play(mime, data, repeat, ctxt);
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_Popup::_sk_CH_Popup (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_Popup::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_Popup_ptr
RolePlaying::CH_Popup::_duplicate(RolePlaying::CH_Popup_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Popup::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_Popup_ptr
RolePlaying::CH_Popup::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Popup::_nil();
  RolePlaying::CH_Popup_ptr e = (RolePlaying::CH_Popup_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_Popup_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_Popup::_nil();
}

void *
RolePlaying::CH_Popup::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_Popup_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_Popup::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_Popup_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_Popup_ptr
RolePlaying::CH_Popup_Helper::_nil() {
  return RolePlaying::CH_Popup::_nil();
}

CORBA::Boolean
RolePlaying::CH_Popup_Helper::is_nil(RolePlaying::CH_Popup_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_Popup_Helper::release(RolePlaying::CH_Popup_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_Popup_Helper::duplicate(RolePlaying::CH_Popup_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_Popup_Helper::NP_alignedSize(RolePlaying::CH_Popup_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_Popup::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_Popup_Helper::marshalObjRef(RolePlaying::CH_Popup_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_Popup::marshalObjRef(obj,s);
}

RolePlaying::CH_Popup_ptr RolePlaying::CH_Popup_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_Popup::unmarshalObjRef(s);
}

void
RolePlaying::CH_Popup_Helper::marshalObjRef(RolePlaying::CH_Popup_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_Popup::marshalObjRef(obj,s);
}

RolePlaying::CH_Popup_ptr RolePlaying::CH_Popup_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_Popup::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_Popup_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_Popup_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_Popup_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_Popup *p = new RolePlaying::_proxy_CH_Popup(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_Popup_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_Popup::_0RL_is_a(base_repoId);

}

RolePlaying::CH_Popup_ptr
RolePlaying::CH_Popup::_nil() {
  return RolePlaying::CH_Popup_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_Popup_proxyObjectFactory RolePlaying_CH_Popup_proxyObjectFactory;
RolePlaying::CH_Popup_ptr RolePlaying::CH_Popup_proxyObjectFactory::__nil_CH_Popup = 0;

RolePlaying::CH_History::~CH_History () {}

RolePlaying::_sk_CH_History::~_sk_CH_History () {}

RolePlaying::_proxy_CH_History::~_proxy_CH_History () {}

RolePlaying::_nil_CH_History::~_nil_CH_History () {}

RolePlaying::CH_History_proxyObjectFactory::~CH_History_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cRolePlaying_mClientHandler_mHandlerNotActive
class _0RL_pc_385b9319d6b95da1_21000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_21000000(const char* _op, size_t _op_len, const char* _a_text) :
    OmniProxyCallDescWithContext(_op, _op_len, 1),
    arg_text(_a_text)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);

private:
  const char* arg_text;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_21000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_text) ? strlen((const char*) arg_text) + 1 : 1);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_21000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_text)? strlen((const char*) arg_text) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_text),_len);
    else {
      if ((const char*) arg_text == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
}

void _0RL_pc_385b9319d6b95da1_21000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID) == 0 ) {
    RolePlaying::ClientHandler::HandlerNotActive _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

static const char* _0RL_ctx_385b9319d6b95da1_31000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_History::append_text(const char*  text,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_21000000 _call_desc("append_text", 12, text);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_31000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



// Proxy call descriptor class. Mangled signature:
//  void_e_cRolePlaying_mClientHandler_mHandlerNotActive
class _0RL_pc_385b9319d6b95da1_41000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_41000000(const char* _op, size_t _op_len) :
    OmniProxyCallDescWithContext(_op, _op_len, 1)  {}

  virtual void userException(GIOP_C&, const char*);

private:
};

void _0RL_pc_385b9319d6b95da1_41000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID) == 0 ) {
    RolePlaying::ClientHandler::HandlerNotActive _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

static const char* _0RL_ctx_385b9319d6b95da1_51000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_History::clear(CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_41000000 _call_desc("clear", 6);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_51000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_CH_History::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"append_text") == 0)
  {
    CORBA::String_var text;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      text = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        try {
      append_text(text, ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"clear") == 0)
  {
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        try {
      clear(ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_History::_sk_CH_History (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_History::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_History_ptr
RolePlaying::CH_History::_duplicate(RolePlaying::CH_History_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_History::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_History_ptr
RolePlaying::CH_History::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_History::_nil();
  RolePlaying::CH_History_ptr e = (RolePlaying::CH_History_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_History_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_History::_nil();
}

void *
RolePlaying::CH_History::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_History_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_History::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_History_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_History_ptr
RolePlaying::CH_History_Helper::_nil() {
  return RolePlaying::CH_History::_nil();
}

CORBA::Boolean
RolePlaying::CH_History_Helper::is_nil(RolePlaying::CH_History_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_History_Helper::release(RolePlaying::CH_History_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_History_Helper::duplicate(RolePlaying::CH_History_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_History_Helper::NP_alignedSize(RolePlaying::CH_History_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_History::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_History_Helper::marshalObjRef(RolePlaying::CH_History_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_History::marshalObjRef(obj,s);
}

RolePlaying::CH_History_ptr RolePlaying::CH_History_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_History::unmarshalObjRef(s);
}

void
RolePlaying::CH_History_Helper::marshalObjRef(RolePlaying::CH_History_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_History::marshalObjRef(obj,s);
}

RolePlaying::CH_History_ptr RolePlaying::CH_History_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_History::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_History_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_History_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_History_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_History *p = new RolePlaying::_proxy_CH_History(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_History_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_History::_0RL_is_a(base_repoId);

}

RolePlaying::CH_History_ptr
RolePlaying::CH_History::_nil() {
  return RolePlaying::CH_History_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_History_proxyObjectFactory RolePlaying_CH_History_proxyObjectFactory;
RolePlaying::CH_History_ptr RolePlaying::CH_History_proxyObjectFactory::__nil_CH_History = 0;

RolePlaying::CH_InputLine::~CH_InputLine () {}

RolePlaying::_sk_CH_InputLine::~_sk_CH_InputLine () {}

RolePlaying::_proxy_CH_InputLine::~_proxy_CH_InputLine () {}

RolePlaying::_nil_CH_InputLine::~_nil_CH_InputLine () {}

RolePlaying::CH_InputLine_proxyObjectFactory::~CH_InputLine_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  void_i_cRolePlaying_mSH__Receiver_e_cRolePlaying_mClientHandler_mHandlerNotActive
class _0RL_pc_385b9319d6b95da1_61000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_61000000(const char* _op, size_t _op_len, RolePlaying::SH_Receiver_ptr _a_dest) :
    OmniProxyCallDescWithContext(_op, _op_len, 1),
    arg_dest(_a_dest)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);

private:
  RolePlaying::SH_Receiver_ptr arg_dest;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_61000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = RolePlaying::SH_Receiver_Helper::NP_alignedSize(arg_dest,msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_61000000::marshalArguments(GIOP_C& giop_client)
{
  RolePlaying::SH_Receiver_Helper::marshalObjRef(arg_dest,giop_client);
}

void _0RL_pc_385b9319d6b95da1_61000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID) == 0 ) {
    RolePlaying::ClientHandler::HandlerNotActive _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

static const char* _0RL_ctx_385b9319d6b95da1_71000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_InputLine::sensitive(RolePlaying::SH_Receiver_ptr  dest,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_61000000 _call_desc("sensitive", 10, dest);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_71000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



static const char* _0RL_ctx_385b9319d6b95da1_81000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_InputLine::resensitive(CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_41000000 _call_desc("resensitive", 12);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_81000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



static const char* _0RL_ctx_385b9319d6b95da1_91000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_CH_InputLine::unsensitive(CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_41000000 _call_desc("unsensitive", 12);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_91000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_pc_385b9319d6b95da1_a1000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_a1000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline CORBA::Boolean result() { return pd_result; }

private:
  CORBA::Boolean pd_result;
};

void _0RL_pc_385b9319d6b95da1_a1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean
class _0RL_pc_385b9319d6b95da1_b1000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_b1000000(const char* _op, size_t _op_len, CORBA::Boolean arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  CORBA::Boolean _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_b1000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize += 1;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_b1000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

CORBA::Boolean RolePlaying::_proxy_CH_InputLine::auto_disable()
{
  _0RL_pc_385b9319d6b95da1_a1000000 _call_desc("_get_auto_disable", 18);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


void RolePlaying::_proxy_CH_InputLine::auto_disable(CORBA::Boolean _value)
{
  _0RL_pc_385b9319d6b95da1_b1000000 _call_desc("_set_auto_disable", 18, _value);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



CORBA::Boolean
RolePlaying::_sk_CH_InputLine::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"sensitive") == 0)
  {
    SH_Receiver_var dest;
    dest = SH_Receiver_Helper::unmarshalObjRef(_0RL_s);
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        try {
      sensitive(dest, ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"resensitive") == 0)
  {
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        try {
      resensitive(ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"unsensitive") == 0)
  {
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        try {
      unsensitive(ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_auto_disable") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::Boolean _0RL_result = auto_disable();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize += 1;
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_result >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_set_auto_disable") == 0)
  {
    if (!_0RL_response_expected) {
      throw CORBA::BAD_OPERATION(0,CORBA::COMPLETED_NO);
    }
    CORBA::Boolean _value;
    _value <<= _0RL_s;
    _0RL_s.RequestReceived();
    auto_disable(_value);
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_InputLine::_sk_CH_InputLine (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_InputLine::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_InputLine_ptr
RolePlaying::CH_InputLine::_duplicate(RolePlaying::CH_InputLine_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_InputLine::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_InputLine_ptr
RolePlaying::CH_InputLine::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_InputLine::_nil();
  RolePlaying::CH_InputLine_ptr e = (RolePlaying::CH_InputLine_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_InputLine_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_InputLine::_nil();
}

void *
RolePlaying::CH_InputLine::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_InputLine_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_InputLine::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_InputLine_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_InputLine_ptr
RolePlaying::CH_InputLine_Helper::_nil() {
  return RolePlaying::CH_InputLine::_nil();
}

CORBA::Boolean
RolePlaying::CH_InputLine_Helper::is_nil(RolePlaying::CH_InputLine_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_InputLine_Helper::release(RolePlaying::CH_InputLine_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_InputLine_Helper::duplicate(RolePlaying::CH_InputLine_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_InputLine_Helper::NP_alignedSize(RolePlaying::CH_InputLine_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_InputLine::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_InputLine_Helper::marshalObjRef(RolePlaying::CH_InputLine_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_InputLine::marshalObjRef(obj,s);
}

RolePlaying::CH_InputLine_ptr RolePlaying::CH_InputLine_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_InputLine::unmarshalObjRef(s);
}

void
RolePlaying::CH_InputLine_Helper::marshalObjRef(RolePlaying::CH_InputLine_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_InputLine::marshalObjRef(obj,s);
}

RolePlaying::CH_InputLine_ptr RolePlaying::CH_InputLine_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_InputLine::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_InputLine_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_InputLine_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_InputLine_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_InputLine *p = new RolePlaying::_proxy_CH_InputLine(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_InputLine_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_InputLine::_0RL_is_a(base_repoId);

}

RolePlaying::CH_InputLine_ptr
RolePlaying::CH_InputLine::_nil() {
  return RolePlaying::CH_InputLine_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_InputLine_proxyObjectFactory RolePlaying_CH_InputLine_proxyObjectFactory;
RolePlaying::CH_InputLine_ptr RolePlaying::CH_InputLine_proxyObjectFactory::__nil_CH_InputLine = 0;

RolePlaying::CH_Requester::~CH_Requester () {}

RolePlaying::_sk_CH_Requester::~_sk_CH_Requester () {}

RolePlaying::_proxy_CH_Requester::~_proxy_CH_Requester () {}

RolePlaying::_nil_CH_Requester::~_nil_CH_Requester () {}

RolePlaying::CH_Requester_proxyObjectFactory::~CH_Requester_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_i_cboolean_e_cRolePlaying_mClientHandler_mHandlerNotActive
class _0RL_pc_385b9319d6b95da1_c1000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_c1000000(const char* _op, size_t _op_len, const char* _a_what, CORBA::Boolean _a_cancelable) :
    OmniProxyCallDescWithContext(_op, _op_len, 1),
    arg_what(_a_what),
    arg_cancelable(_a_cancelable)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void unmarshalReturnedValues(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);
  inline char* result() { return pd_result; }

private:
  const char* arg_what;
  CORBA::Boolean arg_cancelable;
  char* pd_result;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_c1000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_what) ? strlen((const char*) arg_what) + 1 : 1);
  msgsize += 1;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_c1000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_what)? strlen((const char*) arg_what) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_what),_len);
    else {
      if ((const char*) arg_what == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_cancelable >>= giop_client;
}

void _0RL_pc_385b9319d6b95da1_c1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
}

void _0RL_pc_385b9319d6b95da1_c1000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID) == 0 ) {
    RolePlaying::ClientHandler::HandlerNotActive _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

static const char* _0RL_ctx_385b9319d6b95da1_d1000000[] = {
"cookie",
 0 };

char*  RolePlaying::_proxy_CH_Requester::request_string(const char*  what, CORBA::Boolean  cancelable,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_c1000000 _call_desc("request_string", 15, what, cancelable);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_d1000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



static const char* _0RL_ctx_385b9319d6b95da1_e1000000[] = {
"cookie",
 0 };

char*  RolePlaying::_proxy_CH_Requester::request_text(const char*  what, CORBA::Boolean  cancelable,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_c1000000 _call_desc("request_text", 13, what, cancelable);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_e1000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}




CORBA::Boolean
RolePlaying::_sk_CH_Requester::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"request_string") == 0)
  {
    CORBA::String_var what;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      what = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Boolean cancelable;
    cancelable <<= _0RL_s;
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result;
    try {
      _0RL_result = request_string(what, cancelable, ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"request_text") == 0)
  {
    CORBA::String_var what;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      what = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Boolean cancelable;
    cancelable <<= _0RL_s;
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result;
    try {
      _0RL_result = request_text(what, cancelable, ctxt);
    }
    catch ( RolePlaying::ClientHandler::HandlerNotActive &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 55;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 51;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_HandlerNotActive_IntfRepoID,51);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_Requester::_sk_CH_Requester (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_Requester::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_Requester_ptr
RolePlaying::CH_Requester::_duplicate(RolePlaying::CH_Requester_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Requester::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_Requester_ptr
RolePlaying::CH_Requester::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Requester::_nil();
  RolePlaying::CH_Requester_ptr e = (RolePlaying::CH_Requester_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_Requester_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_Requester::_nil();
}

void *
RolePlaying::CH_Requester::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_Requester_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_Requester::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_Requester_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_Requester_ptr
RolePlaying::CH_Requester_Helper::_nil() {
  return RolePlaying::CH_Requester::_nil();
}

CORBA::Boolean
RolePlaying::CH_Requester_Helper::is_nil(RolePlaying::CH_Requester_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_Requester_Helper::release(RolePlaying::CH_Requester_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_Requester_Helper::duplicate(RolePlaying::CH_Requester_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_Requester_Helper::NP_alignedSize(RolePlaying::CH_Requester_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_Requester::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_Requester_Helper::marshalObjRef(RolePlaying::CH_Requester_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_Requester::marshalObjRef(obj,s);
}

RolePlaying::CH_Requester_ptr RolePlaying::CH_Requester_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_Requester::unmarshalObjRef(s);
}

void
RolePlaying::CH_Requester_Helper::marshalObjRef(RolePlaying::CH_Requester_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_Requester::marshalObjRef(obj,s);
}

RolePlaying::CH_Requester_ptr RolePlaying::CH_Requester_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_Requester::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_Requester_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_Requester_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_Requester_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_Requester *p = new RolePlaying::_proxy_CH_Requester(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_Requester_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_Requester::_0RL_is_a(base_repoId);

}

RolePlaying::CH_Requester_ptr
RolePlaying::CH_Requester::_nil() {
  return RolePlaying::CH_Requester_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_Requester_proxyObjectFactory RolePlaying_CH_Requester_proxyObjectFactory;
RolePlaying::CH_Requester_ptr RolePlaying::CH_Requester_proxyObjectFactory::__nil_CH_Requester = 0;

RolePlaying::CH_CharacterList::~CH_CharacterList () {}

RolePlaying::_sk_CH_CharacterList::~_sk_CH_CharacterList () {}

RolePlaying::_proxy_CH_CharacterList::~_proxy_CH_CharacterList () {}

RolePlaying::_nil_CH_CharacterList::~_nil_CH_CharacterList () {}

RolePlaying::CH_CharacterList_proxyObjectFactory::~CH_CharacterList_proxyObjectFactory () {}


CORBA::Boolean
RolePlaying::_sk_CH_CharacterList::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_CharacterList::_sk_CH_CharacterList (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_CharacterList::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_CharacterList_ptr
RolePlaying::CH_CharacterList::_duplicate(RolePlaying::CH_CharacterList_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_CharacterList::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_CharacterList_ptr
RolePlaying::CH_CharacterList::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_CharacterList::_nil();
  RolePlaying::CH_CharacterList_ptr e = (RolePlaying::CH_CharacterList_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_CharacterList_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_CharacterList::_nil();
}

void *
RolePlaying::CH_CharacterList::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_CharacterList_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_CharacterList::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_CharacterList_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_CharacterList_ptr
RolePlaying::CH_CharacterList_Helper::_nil() {
  return RolePlaying::CH_CharacterList::_nil();
}

CORBA::Boolean
RolePlaying::CH_CharacterList_Helper::is_nil(RolePlaying::CH_CharacterList_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_CharacterList_Helper::release(RolePlaying::CH_CharacterList_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_CharacterList_Helper::duplicate(RolePlaying::CH_CharacterList_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_CharacterList_Helper::NP_alignedSize(RolePlaying::CH_CharacterList_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_CharacterList::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_CharacterList_Helper::marshalObjRef(RolePlaying::CH_CharacterList_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_CharacterList::marshalObjRef(obj,s);
}

RolePlaying::CH_CharacterList_ptr RolePlaying::CH_CharacterList_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_CharacterList::unmarshalObjRef(s);
}

void
RolePlaying::CH_CharacterList_Helper::marshalObjRef(RolePlaying::CH_CharacterList_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_CharacterList::marshalObjRef(obj,s);
}

RolePlaying::CH_CharacterList_ptr RolePlaying::CH_CharacterList_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_CharacterList::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_CharacterList_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_CharacterList_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_CharacterList_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_CharacterList *p = new RolePlaying::_proxy_CH_CharacterList(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_CharacterList_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_CharacterList::_0RL_is_a(base_repoId);

}

RolePlaying::CH_CharacterList_ptr
RolePlaying::CH_CharacterList::_nil() {
  return RolePlaying::CH_CharacterList_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_CharacterList_proxyObjectFactory RolePlaying_CH_CharacterList_proxyObjectFactory;
RolePlaying::CH_CharacterList_ptr RolePlaying::CH_CharacterList_proxyObjectFactory::__nil_CH_CharacterList = 0;

RolePlaying::CH_Compass::~CH_Compass () {}

RolePlaying::_sk_CH_Compass::~_sk_CH_Compass () {}

RolePlaying::_proxy_CH_Compass::~_proxy_CH_Compass () {}

RolePlaying::_nil_CH_Compass::~_nil_CH_Compass () {}

RolePlaying::CH_Compass_proxyObjectFactory::~CH_Compass_proxyObjectFactory () {}


CORBA::Boolean
RolePlaying::_sk_CH_Compass::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_Compass::_sk_CH_Compass (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_Compass::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_Compass_ptr
RolePlaying::CH_Compass::_duplicate(RolePlaying::CH_Compass_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Compass::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_Compass_ptr
RolePlaying::CH_Compass::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Compass::_nil();
  RolePlaying::CH_Compass_ptr e = (RolePlaying::CH_Compass_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_Compass_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_Compass::_nil();
}

void *
RolePlaying::CH_Compass::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_Compass_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_Compass::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_Compass_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_Compass_ptr
RolePlaying::CH_Compass_Helper::_nil() {
  return RolePlaying::CH_Compass::_nil();
}

CORBA::Boolean
RolePlaying::CH_Compass_Helper::is_nil(RolePlaying::CH_Compass_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_Compass_Helper::release(RolePlaying::CH_Compass_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_Compass_Helper::duplicate(RolePlaying::CH_Compass_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_Compass_Helper::NP_alignedSize(RolePlaying::CH_Compass_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_Compass::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_Compass_Helper::marshalObjRef(RolePlaying::CH_Compass_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_Compass::marshalObjRef(obj,s);
}

RolePlaying::CH_Compass_ptr RolePlaying::CH_Compass_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_Compass::unmarshalObjRef(s);
}

void
RolePlaying::CH_Compass_Helper::marshalObjRef(RolePlaying::CH_Compass_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_Compass::marshalObjRef(obj,s);
}

RolePlaying::CH_Compass_ptr RolePlaying::CH_Compass_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_Compass::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_Compass_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_Compass_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_Compass_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_Compass *p = new RolePlaying::_proxy_CH_Compass(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_Compass_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_Compass::_0RL_is_a(base_repoId);

}

RolePlaying::CH_Compass_ptr
RolePlaying::CH_Compass::_nil() {
  return RolePlaying::CH_Compass_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_Compass_proxyObjectFactory RolePlaying_CH_Compass_proxyObjectFactory;
RolePlaying::CH_Compass_ptr RolePlaying::CH_Compass_proxyObjectFactory::__nil_CH_Compass = 0;

RolePlaying::CH_Sound::~CH_Sound () {}

RolePlaying::_sk_CH_Sound::~_sk_CH_Sound () {}

RolePlaying::_proxy_CH_Sound::~_proxy_CH_Sound () {}

RolePlaying::_nil_CH_Sound::~_nil_CH_Sound () {}

RolePlaying::CH_Sound_proxyObjectFactory::~CH_Sound_proxyObjectFactory () {}

RolePlaying::MIMEList* RolePlaying::_proxy_CH_Sound::SupportedMIME()
{
  _0RL_pc_385b9319d6b95da1_a0000000 _call_desc("_get_SupportedMIME", 19);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



CORBA::Boolean
RolePlaying::_sk_CH_Sound::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_SupportedMIME") == 0)
  {
    _0RL_s.RequestReceived();
    MIMEList_var _0RL_result = SupportedMIME();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (_sk_ClientHandler::dispatch(_0RL_s,_0RL_op,_0RL_response_expected)) {
    return 1;
  }
  return 0;
}

RolePlaying::_sk_CH_Sound::_sk_CH_Sound (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_CH_Sound::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::CH_Sound_ptr
RolePlaying::CH_Sound::_duplicate(RolePlaying::CH_Sound_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Sound::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::CH_Sound_ptr
RolePlaying::CH_Sound::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::CH_Sound::_nil();
  RolePlaying::CH_Sound_ptr e = (RolePlaying::CH_Sound_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_CH_Sound_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::CH_Sound::_nil();
}

void *
RolePlaying::CH_Sound::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_CH_Sound_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    void *_p;
    if ((_p = ClientHandler::_widenFromTheMostDerivedIntf(repoId))) {
      return _p;
    }
    else
      return 0;
  }
}

CORBA::Boolean
RolePlaying::CH_Sound::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_CH_Sound_IntfRepoID)==0)
    return 1;
  else if (ClientHandler::_0RL_is_a(base_repoId))
    return 1;
  else
    return 0;
}

RolePlaying::CH_Sound_ptr
RolePlaying::CH_Sound_Helper::_nil() {
  return RolePlaying::CH_Sound::_nil();
}

CORBA::Boolean
RolePlaying::CH_Sound_Helper::is_nil(RolePlaying::CH_Sound_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::CH_Sound_Helper::release(RolePlaying::CH_Sound_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::CH_Sound_Helper::duplicate(RolePlaying::CH_Sound_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::CH_Sound_Helper::NP_alignedSize(RolePlaying::CH_Sound_ptr obj,size_t initialoffset) {
  return RolePlaying::CH_Sound::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::CH_Sound_Helper::marshalObjRef(RolePlaying::CH_Sound_ptr obj,NetBufferedStream &s) {
  RolePlaying::CH_Sound::marshalObjRef(obj,s);
}

RolePlaying::CH_Sound_ptr RolePlaying::CH_Sound_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::CH_Sound::unmarshalObjRef(s);
}

void
RolePlaying::CH_Sound_Helper::marshalObjRef(RolePlaying::CH_Sound_ptr obj,MemBufferedStream &s) {
  RolePlaying::CH_Sound::marshalObjRef(obj,s);
}

RolePlaying::CH_Sound_ptr RolePlaying::CH_Sound_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::CH_Sound::unmarshalObjRef(s);
}

const char *
RolePlaying::CH_Sound_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_CH_Sound_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::CH_Sound_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_CH_Sound *p = new RolePlaying::_proxy_CH_Sound(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::CH_Sound_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::CH_Sound::_0RL_is_a(base_repoId);

}

RolePlaying::CH_Sound_ptr
RolePlaying::CH_Sound::_nil() {
  return RolePlaying::CH_Sound_proxyObjectFactory::_nil();
}

static const RolePlaying::CH_Sound_proxyObjectFactory RolePlaying_CH_Sound_proxyObjectFactory;
RolePlaying::CH_Sound_ptr RolePlaying::CH_Sound_proxyObjectFactory::__nil_CH_Sound = 0;

CORBA::Exception::insertExceptionToAny RolePlaying::Client::NoHandlerAvailable::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::Client::NoHandlerAvailable::insertToAnyFnNCP = 0;

RolePlaying::Client::NoHandlerAvailable::NoHandlerAvailable(const RolePlaying::Client::NoHandlerAvailable &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::Client::NoHandlerAvailable & RolePlaying::Client::NoHandlerAvailable::operator=(const RolePlaying::Client::NoHandlerAvailable& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::Client::NoHandlerAvailable::~NoHandlerAvailable() {}

void RolePlaying::Client::NoHandlerAvailable::_raise() { throw *this; }

RolePlaying::Client::NoHandlerAvailable* RolePlaying::Client::NoHandlerAvailable::_downcast(CORBA::Exception* e) {
  return (RolePlaying::Client::NoHandlerAvailable*)_NP_is_a(e,"Exception/UserException/RolePlaying_Client_NoHandlerAvailable");
}

const RolePlaying::Client::NoHandlerAvailable* RolePlaying::Client::NoHandlerAvailable::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::Client::NoHandlerAvailable*)_NP_is_a(e,"Exception/UserException/RolePlaying_Client_NoHandlerAvailable");
}

RolePlaying::Client::NoHandlerAvailable* RolePlaying::Client::NoHandlerAvailable::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::Client::NoHandlerAvailable::_NP_duplicate() const {
  return new RolePlaying::Client::NoHandlerAvailable(*this);
}

const char* RolePlaying::Client::NoHandlerAvailable::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_Client_NoHandlerAvailable";
}
size_t
RolePlaying::Client::NoHandlerAvailable::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::Client::NoHandlerAvailable::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::Client::NoHandlerAvailable::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::Client::NoHandlerAvailable::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::Client::NoHandlerAvailable::operator<<= (MemBufferedStream &_n)
{
}

RolePlaying::Client::~Client () {}

RolePlaying::_sk_Client::~_sk_Client () {}

RolePlaying::_proxy_Client::~_proxy_Client () {}

RolePlaying::_nil_Client::~_nil_Client () {}

RolePlaying::Client_proxyObjectFactory::~Client_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  _cRolePlaying_mClientHandler_i_cstring_i_cunsigned_plong_e_cRolePlaying_mClientHandler_mNoSuchHandler
class _0RL_pc_385b9319d6b95da1_f1000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_f1000000(const char* _op, size_t _op_len, const char* _a_which, CORBA::ULong _a_version) :
    OmniProxyCallDesc(_op, _op_len, 1),
    arg_which(_a_which),
    arg_version(_a_version)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void unmarshalReturnedValues(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);
  inline RolePlaying::ClientHandler_ptr result() { return pd_result; }

private:
  const char* arg_which;
  CORBA::ULong arg_version;
  RolePlaying::ClientHandler_ptr pd_result;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_f1000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_which) ? strlen((const char*) arg_which) + 1 : 1);
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_f1000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_which)? strlen((const char*) arg_which) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_which),_len);
    else {
      if ((const char*) arg_which == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  arg_version >>= giop_client;
}

void _0RL_pc_385b9319d6b95da1_f1000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = RolePlaying::ClientHandler_Helper::unmarshalObjRef(giop_client);
}

void _0RL_pc_385b9319d6b95da1_f1000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_ClientHandler_NoSuchHandler_IntfRepoID) == 0 ) {
    RolePlaying::ClientHandler::NoSuchHandler _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

RolePlaying::ClientHandler_ptr  RolePlaying::_proxy_Client::get_handler(const char*  which, CORBA::ULong  version)
{
  _0RL_pc_385b9319d6b95da1_f1000000 _call_desc("get_handler", 12, which, version);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



// Proxy call descriptor class. Mangled signature:
//  _wvoid_i_cstring
class _0RL_pc_385b9319d6b95da1_02000000
  : public OmniOWProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_02000000(const char* _op, size_t _op_len, const char* _a_reason) :
    OmniOWProxyCallDescWithContext(_op, _op_len),
    arg_reason(_a_reason)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const char* arg_reason;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_02000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_reason) ? strlen((const char*) arg_reason) + 1 : 1);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_02000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_reason)? strlen((const char*) arg_reason) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_reason),_len);
    else {
      if ((const char*) arg_reason == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
}

static const char* _0RL_ctx_385b9319d6b95da1_12000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_Client::kick(const char*  reason,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_02000000 _call_desc("kick", 5, reason);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_12000000,1);

  OmniProxyCallWrapper::one_way(this, _call_desc);
}



// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_n_cCORBA_sObject_e_cRolePlaying_mUnknownMIMEType_e_cRolePlaying_mClient_mNoHandlerAvailable
class _0RL_pc_385b9319d6b95da1_22000000
  : public OmniProxyCallDescWithContext
{
public:
  inline _0RL_pc_385b9319d6b95da1_22000000(const char* _op, size_t _op_len, const char* _a_type, CORBA::Object_ptr& _a_o) :
    OmniProxyCallDescWithContext(_op, _op_len, 1),
    arg_type(_a_type),
    arg_o(_a_o)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void unmarshalReturnedValues(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);

private:
  const char* arg_type;
  CORBA::Object_ptr& arg_o;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_22000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4
    + (((const char*) arg_type) ? strlen((const char*) arg_type) + 1 : 1);
  msgsize = CORBA::Object_Helper::NP_alignedSize(arg_o,msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_22000000::marshalArguments(GIOP_C& giop_client)
{
  {
    CORBA::ULong _len = (((const char*) arg_type)? strlen((const char*) arg_type) + 1 : 1);
    _len >>= giop_client;
    if (_len > 1)
      giop_client.put_char_array((const CORBA::Char *)((const char*) arg_type),_len);
    else {
      if ((const char*) arg_type == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= giop_client;
    }
  }
  CORBA::Object_Helper::marshalObjRef(arg_o,giop_client);
}

void _0RL_pc_385b9319d6b95da1_22000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  CORBA::Object_ptr _arg_o;
  _arg_o = CORBA::Object_Helper::unmarshalObjRef(giop_client);
  CORBA::Object_Helper::release(arg_o);
  arg_o = _arg_o;
}

void _0RL_pc_385b9319d6b95da1_22000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_UnknownMIMEType_IntfRepoID) == 0 ) {
    RolePlaying::UnknownMIMEType _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else if( strcmp(repoId, RolePlaying_Client_NoHandlerAvailable_IntfRepoID) == 0 ) {
    RolePlaying::Client::NoHandlerAvailable _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

static const char* _0RL_ctx_385b9319d6b95da1_32000000[] = {
"cookie",
 0 };

void RolePlaying::_proxy_Client::_0RL__request_object(const char*  type, CORBA::Object_ptr & o,CORBA::Context_ptr ctxt)
{
  _0RL_pc_385b9319d6b95da1_22000000 _call_desc("request_object", 15, type, o);

  _call_desc.set_context(ctxt,_0RL_ctx_385b9319d6b95da1_32000000,1);

  OmniProxyCallWrapper::invoke(this, _call_desc);
}



CORBA::Boolean
RolePlaying::_sk_Client::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"get_handler") == 0)
  {
    CORBA::String_var which;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      which = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::ULong version;
    version <<= _0RL_s;
    _0RL_s.RequestReceived();
    ClientHandler_var _0RL_result;
    try {
      _0RL_result = get_handler(which, version);
    }
    catch ( RolePlaying::ClientHandler::NoSuchHandler &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 52;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 48;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_ClientHandler_NoSuchHandler_IntfRepoID,48);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = ClientHandler_Helper::NP_alignedSize((_0RL_result.operator->()),_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    ClientHandler_Helper::marshalObjRef((_0RL_result.operator->()),_0RL_s);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"kick") == 0)
  {
    if (_0RL_response_expected) {
      throw CORBA::BAD_OPERATION(0,CORBA::COMPLETED_NO);
    }
    CORBA::String_var reason;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      reason = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        kick(reason, ctxt);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"request_object") == 0)
  {
    CORBA::String_var type;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      type = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    CORBA::Object_var o;
    o = CORBA::Object_Helper::unmarshalObjRef(_0RL_s);
    CORBA::Context_var ctxt;
    ctxt = CORBA::Context::unmarshalContext(_0RL_s);
    _0RL_s.RequestReceived();
        try {
      Client::request_object(type, o, ctxt);
    }
    catch ( RolePlaying::UnknownMIMEType &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 40;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 36;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_UnknownMIMEType_IntfRepoID,36);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    catch ( RolePlaying::Client::NoHandlerAvailable &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 50;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 46;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_Client_NoHandlerAvailable_IntfRepoID,46);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = CORBA::Object_Helper::NP_alignedSize(o,_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    CORBA::Object_Helper::marshalObjRef(o,_0RL_s);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_Client::_sk_Client (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Client::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Client_ptr
RolePlaying::Client::_duplicate(RolePlaying::Client_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Client::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Client_ptr
RolePlaying::Client::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Client::_nil();
  RolePlaying::Client_ptr e = (RolePlaying::Client_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Client_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Client::_nil();
}

void *
RolePlaying::Client::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Client_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::Client::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Client_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::Client_ptr
RolePlaying::Client_Helper::_nil() {
  return RolePlaying::Client::_nil();
}

CORBA::Boolean
RolePlaying::Client_Helper::is_nil(RolePlaying::Client_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Client_Helper::release(RolePlaying::Client_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Client_Helper::duplicate(RolePlaying::Client_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Client_Helper::NP_alignedSize(RolePlaying::Client_ptr obj,size_t initialoffset) {
  return RolePlaying::Client::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Client_Helper::marshalObjRef(RolePlaying::Client_ptr obj,NetBufferedStream &s) {
  RolePlaying::Client::marshalObjRef(obj,s);
}

RolePlaying::Client_ptr RolePlaying::Client_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Client::unmarshalObjRef(s);
}

void
RolePlaying::Client_Helper::marshalObjRef(RolePlaying::Client_ptr obj,MemBufferedStream &s) {
  RolePlaying::Client::marshalObjRef(obj,s);
}

RolePlaying::Client_ptr RolePlaying::Client_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Client::unmarshalObjRef(s);
}

const char *
RolePlaying::Client_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Client_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Client_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Client *p = new RolePlaying::_proxy_Client(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Client_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Client::_0RL_is_a(base_repoId);

}

RolePlaying::Client_ptr
RolePlaying::Client::_nil() {
  return RolePlaying::Client_proxyObjectFactory::_nil();
}

static const RolePlaying::Client_proxyObjectFactory RolePlaying_Client_proxyObjectFactory;
RolePlaying::Client_ptr RolePlaying::Client_proxyObjectFactory::__nil_Client = 0;

RolePlaying::System::~System () {}

RolePlaying::_sk_System::~_sk_System () {}

RolePlaying::_proxy_System::~_proxy_System () {}

RolePlaying::_nil_System::~_nil_System () {}

RolePlaying::System_proxyObjectFactory::~System_proxyObjectFactory () {}

char* RolePlaying::_proxy_System::name()
{
  _0RL_pc_385b9319d6b95da1_00000000 _call_desc("_get_name", 10);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


char* RolePlaying::_proxy_System::description()
{
  _0RL_pc_385b9319d6b95da1_00000000 _call_desc("_get_description", 17);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



CORBA::Boolean
RolePlaying::_sk_System::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_name") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result = name();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_description") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result = description();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_System::_sk_System (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_System::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::System_ptr
RolePlaying::System::_duplicate(RolePlaying::System_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::System::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::System_ptr
RolePlaying::System::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::System::_nil();
  RolePlaying::System_ptr e = (RolePlaying::System_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_System_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::System::_nil();
}

void *
RolePlaying::System::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_System_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::System::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_System_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::System_ptr
RolePlaying::System_Helper::_nil() {
  return RolePlaying::System::_nil();
}

CORBA::Boolean
RolePlaying::System_Helper::is_nil(RolePlaying::System_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::System_Helper::release(RolePlaying::System_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::System_Helper::duplicate(RolePlaying::System_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::System_Helper::NP_alignedSize(RolePlaying::System_ptr obj,size_t initialoffset) {
  return RolePlaying::System::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::System_Helper::marshalObjRef(RolePlaying::System_ptr obj,NetBufferedStream &s) {
  RolePlaying::System::marshalObjRef(obj,s);
}

RolePlaying::System_ptr RolePlaying::System_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::System::unmarshalObjRef(s);
}

void
RolePlaying::System_Helper::marshalObjRef(RolePlaying::System_ptr obj,MemBufferedStream &s) {
  RolePlaying::System::marshalObjRef(obj,s);
}

RolePlaying::System_ptr RolePlaying::System_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::System::unmarshalObjRef(s);
}

const char *
RolePlaying::System_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_System_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::System_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_System *p = new RolePlaying::_proxy_System(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::System_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::System::_0RL_is_a(base_repoId);

}

RolePlaying::System_ptr
RolePlaying::System::_nil() {
  return RolePlaying::System_proxyObjectFactory::_nil();
}

static const RolePlaying::System_proxyObjectFactory RolePlaying_System_proxyObjectFactory;
RolePlaying::System_ptr RolePlaying::System_proxyObjectFactory::__nil_System = 0;

const CORBA::ULong RolePlaying::Game::GTMastered _init_in_cldef_(  = 1 );
const CORBA::ULong RolePlaying::Game::GTMultiPlayer _init_in_cldef_(  = 2 );
const CORBA::ULong RolePlaying::Game::GTMultiCharacter _init_in_cldef_(  = 4 );
CORBA::Exception::insertExceptionToAny RolePlaying::Game::FeatureMissing::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::Game::FeatureMissing::insertToAnyFnNCP = 0;

RolePlaying::Game::FeatureMissing::FeatureMissing(const RolePlaying::Game::FeatureMissing &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::Game::FeatureMissing & RolePlaying::Game::FeatureMissing::operator=(const RolePlaying::Game::FeatureMissing& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::Game::FeatureMissing::~FeatureMissing() {}

void RolePlaying::Game::FeatureMissing::_raise() { throw *this; }

RolePlaying::Game::FeatureMissing* RolePlaying::Game::FeatureMissing::_downcast(CORBA::Exception* e) {
  return (RolePlaying::Game::FeatureMissing*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_FeatureMissing");
}

const RolePlaying::Game::FeatureMissing* RolePlaying::Game::FeatureMissing::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::Game::FeatureMissing*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_FeatureMissing");
}

RolePlaying::Game::FeatureMissing* RolePlaying::Game::FeatureMissing::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::Game::FeatureMissing::_NP_duplicate() const {
  return new RolePlaying::Game::FeatureMissing(*this);
}

const char* RolePlaying::Game::FeatureMissing::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_Game_FeatureMissing";
}
size_t
RolePlaying::Game::FeatureMissing::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::Game::FeatureMissing::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::Game::FeatureMissing::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::Game::FeatureMissing::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::Game::FeatureMissing::operator<<= (MemBufferedStream &_n)
{
}

CORBA::Exception::insertExceptionToAny RolePlaying::Game::AlreadyJoined::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::Game::AlreadyJoined::insertToAnyFnNCP = 0;

RolePlaying::Game::AlreadyJoined::AlreadyJoined(const RolePlaying::Game::AlreadyJoined &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::Game::AlreadyJoined & RolePlaying::Game::AlreadyJoined::operator=(const RolePlaying::Game::AlreadyJoined& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::Game::AlreadyJoined::~AlreadyJoined() {}

void RolePlaying::Game::AlreadyJoined::_raise() { throw *this; }

RolePlaying::Game::AlreadyJoined* RolePlaying::Game::AlreadyJoined::_downcast(CORBA::Exception* e) {
  return (RolePlaying::Game::AlreadyJoined*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_AlreadyJoined");
}

const RolePlaying::Game::AlreadyJoined* RolePlaying::Game::AlreadyJoined::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::Game::AlreadyJoined*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_AlreadyJoined");
}

RolePlaying::Game::AlreadyJoined* RolePlaying::Game::AlreadyJoined::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::Game::AlreadyJoined::_NP_duplicate() const {
  return new RolePlaying::Game::AlreadyJoined(*this);
}

const char* RolePlaying::Game::AlreadyJoined::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_Game_AlreadyJoined";
}
size_t
RolePlaying::Game::AlreadyJoined::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::Game::AlreadyJoined::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::Game::AlreadyJoined::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::Game::AlreadyJoined::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::Game::AlreadyJoined::operator<<= (MemBufferedStream &_n)
{
}

CORBA::Exception::insertExceptionToAny RolePlaying::Game::GameFull::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::Game::GameFull::insertToAnyFnNCP = 0;

RolePlaying::Game::GameFull::GameFull(const RolePlaying::Game::GameFull &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::Game::GameFull & RolePlaying::Game::GameFull::operator=(const RolePlaying::Game::GameFull& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::Game::GameFull::~GameFull() {}

void RolePlaying::Game::GameFull::_raise() { throw *this; }

RolePlaying::Game::GameFull* RolePlaying::Game::GameFull::_downcast(CORBA::Exception* e) {
  return (RolePlaying::Game::GameFull*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_GameFull");
}

const RolePlaying::Game::GameFull* RolePlaying::Game::GameFull::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::Game::GameFull*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_GameFull");
}

RolePlaying::Game::GameFull* RolePlaying::Game::GameFull::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::Game::GameFull::_NP_duplicate() const {
  return new RolePlaying::Game::GameFull(*this);
}

const char* RolePlaying::Game::GameFull::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_Game_GameFull";
}
size_t
RolePlaying::Game::GameFull::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::Game::GameFull::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::Game::GameFull::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::Game::GameFull::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::Game::GameFull::operator<<= (MemBufferedStream &_n)
{
}

CORBA::Exception::insertExceptionToAny RolePlaying::Game::NoAuthorization::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::Game::NoAuthorization::insertToAnyFnNCP = 0;

RolePlaying::Game::NoAuthorization::NoAuthorization(const RolePlaying::Game::NoAuthorization &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::Game::NoAuthorization & RolePlaying::Game::NoAuthorization::operator=(const RolePlaying::Game::NoAuthorization& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::Game::NoAuthorization::~NoAuthorization() {}

void RolePlaying::Game::NoAuthorization::_raise() { throw *this; }

RolePlaying::Game::NoAuthorization* RolePlaying::Game::NoAuthorization::_downcast(CORBA::Exception* e) {
  return (RolePlaying::Game::NoAuthorization*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_NoAuthorization");
}

const RolePlaying::Game::NoAuthorization* RolePlaying::Game::NoAuthorization::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::Game::NoAuthorization*)_NP_is_a(e,"Exception/UserException/RolePlaying_Game_NoAuthorization");
}

RolePlaying::Game::NoAuthorization* RolePlaying::Game::NoAuthorization::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::Game::NoAuthorization::_NP_duplicate() const {
  return new RolePlaying::Game::NoAuthorization(*this);
}

const char* RolePlaying::Game::NoAuthorization::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_Game_NoAuthorization";
}
size_t
RolePlaying::Game::NoAuthorization::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::Game::NoAuthorization::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::Game::NoAuthorization::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::Game::NoAuthorization::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::Game::NoAuthorization::operator<<= (MemBufferedStream &_n)
{
}

RolePlaying::Game::~Game () {}

RolePlaying::_sk_Game::~_sk_Game () {}

RolePlaying::_proxy_Game::~_proxy_Game () {}

RolePlaying::_nil_Game::~_nil_Game () {}

RolePlaying::Game_proxyObjectFactory::~Game_proxyObjectFactory () {}

char* RolePlaying::_proxy_Game::name()
{
  _0RL_pc_385b9319d6b95da1_00000000 _call_desc("_get_name", 10);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


char* RolePlaying::_proxy_Game::description()
{
  _0RL_pc_385b9319d6b95da1_00000000 _call_desc("_get_description", 17);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  _cRolePlaying_mSystem
class _0RL_pc_385b9319d6b95da1_42000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_42000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline RolePlaying::System_ptr result() { return pd_result; }

private:
  RolePlaying::System_ptr pd_result;
};

void _0RL_pc_385b9319d6b95da1_42000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = RolePlaying::System_Helper::unmarshalObjRef(giop_client);
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cRolePlaying_mSystem
class _0RL_pc_385b9319d6b95da1_52000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_52000000(const char* _op, size_t _op_len, RolePlaying::System_ptr arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  RolePlaying::System_ptr _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_52000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = RolePlaying::System_Helper::NP_alignedSize(_value,msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_52000000::marshalArguments(GIOP_C& giop_client)
{
  RolePlaying::System_Helper::marshalObjRef(_value,giop_client);
}

RolePlaying::System_ptr RolePlaying::_proxy_Game::system_o()
{
  _0RL_pc_385b9319d6b95da1_42000000 _call_desc("_get_system_o", 14);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  _cunsigned_plong
class _0RL_pc_385b9319d6b95da1_62000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_62000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline RolePlaying::Game::GameType result() { return pd_result; }

private:
  RolePlaying::Game::GameType pd_result;
};

void _0RL_pc_385b9319d6b95da1_62000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong
class _0RL_pc_385b9319d6b95da1_72000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_72000000(const char* _op, size_t _op_len, RolePlaying::Game::GameType arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  RolePlaying::Game::GameType _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_72000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_72000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

RolePlaying::Game::GameType RolePlaying::_proxy_Game::type()
{
  _0RL_pc_385b9319d6b95da1_62000000 _call_desc("_get_type", 10);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cRolePlaying_mClient_e_cRolePlaying_mGame_mFeatureMissing_e_cRolePlaying_mGame_mAlreadyJoined_e_cRolePlaying_mGame_mGameFull_e_cRolePlaying_mGame_mNoAuthorization
class _0RL_pc_385b9319d6b95da1_82000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_82000000(const char* _op, size_t _op_len, RolePlaying::Client_ptr _a_cl) :
    OmniProxyCallDesc(_op, _op_len, 1),
    arg_cl(_a_cl)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void unmarshalReturnedValues(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);
  inline char* result() { return pd_result; }

private:
  RolePlaying::Client_ptr arg_cl;
  char* pd_result;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_82000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = RolePlaying::Client_Helper::NP_alignedSize(arg_cl,msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_82000000::marshalArguments(GIOP_C& giop_client)
{
  RolePlaying::Client_Helper::marshalObjRef(arg_cl,giop_client);
}

void _0RL_pc_385b9319d6b95da1_82000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
}

void _0RL_pc_385b9319d6b95da1_82000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_Game_FeatureMissing_IntfRepoID) == 0 ) {
    RolePlaying::Game::FeatureMissing _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else if( strcmp(repoId, RolePlaying_Game_AlreadyJoined_IntfRepoID) == 0 ) {
    RolePlaying::Game::AlreadyJoined _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else if( strcmp(repoId, RolePlaying_Game_GameFull_IntfRepoID) == 0 ) {
    RolePlaying::Game::GameFull _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else if( strcmp(repoId, RolePlaying_Game_NoAuthorization_IntfRepoID) == 0 ) {
    RolePlaying::Game::NoAuthorization _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

char*  RolePlaying::_proxy_Game::join(RolePlaying::Client_ptr  cl)
{
  _0RL_pc_385b9319d6b95da1_82000000 _call_desc("join", 5, cl);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



void RolePlaying::_proxy_Game::leave(const char*  id)
{
  _0RL_pc_385b9319d6b95da1_02000000 _call_desc("leave", 6, id);

  OmniProxyCallWrapper::one_way(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_Game::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_name") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result = name();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_description") == 0)
  {
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result = description();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_system_o") == 0)
  {
    _0RL_s.RequestReceived();
    System_var _0RL_result = system_o();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = System_Helper::NP_alignedSize((_0RL_result.operator->()),_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    System_Helper::marshalObjRef((_0RL_result.operator->()),_0RL_s);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"_get_type") == 0)
  {
    _0RL_s.RequestReceived();
    GameType _0RL_result = type();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4;
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    _0RL_result >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"join") == 0)
  {
    Client_var cl;
    cl = Client_Helper::unmarshalObjRef(_0RL_s);
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result;
    try {
      _0RL_result = join(cl);
    }
    catch ( RolePlaying::Game::FeatureMissing &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 44;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 40;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_Game_FeatureMissing_IntfRepoID,40);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    catch ( RolePlaying::Game::AlreadyJoined &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 43;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 39;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_Game_AlreadyJoined_IntfRepoID,39);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    catch ( RolePlaying::Game::GameFull &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 38;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 34;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_Game_GameFull_IntfRepoID,34);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    catch ( RolePlaying::Game::NoAuthorization &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 45;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 41;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_Game_NoAuthorization_IntfRepoID,41);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"leave") == 0)
  {
    if (_0RL_response_expected) {
      throw CORBA::BAD_OPERATION(0,CORBA::COMPLETED_NO);
    }
    CORBA::String_var id;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    _0RL_s.RequestReceived();
        leave(id);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_Game::_sk_Game (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_Game::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::Game_ptr
RolePlaying::Game::_duplicate(RolePlaying::Game_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Game::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::Game_ptr
RolePlaying::Game::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::Game::_nil();
  RolePlaying::Game_ptr e = (RolePlaying::Game_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_Game_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::Game::_nil();
}

void *
RolePlaying::Game::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_Game_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::Game::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_Game_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::Game_ptr
RolePlaying::Game_Helper::_nil() {
  return RolePlaying::Game::_nil();
}

CORBA::Boolean
RolePlaying::Game_Helper::is_nil(RolePlaying::Game_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::Game_Helper::release(RolePlaying::Game_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::Game_Helper::duplicate(RolePlaying::Game_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::Game_Helper::NP_alignedSize(RolePlaying::Game_ptr obj,size_t initialoffset) {
  return RolePlaying::Game::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::Game_Helper::marshalObjRef(RolePlaying::Game_ptr obj,NetBufferedStream &s) {
  RolePlaying::Game::marshalObjRef(obj,s);
}

RolePlaying::Game_ptr RolePlaying::Game_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::Game::unmarshalObjRef(s);
}

void
RolePlaying::Game_Helper::marshalObjRef(RolePlaying::Game_ptr obj,MemBufferedStream &s) {
  RolePlaying::Game::marshalObjRef(obj,s);
}

RolePlaying::Game_ptr RolePlaying::Game_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::Game::unmarshalObjRef(s);
}

const char *
RolePlaying::Game_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_Game_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::Game_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_Game *p = new RolePlaying::_proxy_Game(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::Game_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::Game::_0RL_is_a(base_repoId);

}

RolePlaying::Game_ptr
RolePlaying::Game::_nil() {
  return RolePlaying::Game_proxyObjectFactory::_nil();
}

static const RolePlaying::Game_proxyObjectFactory RolePlaying_Game_proxyObjectFactory;
RolePlaying::Game_ptr RolePlaying::Game_proxyObjectFactory::__nil_Game = 0;

CORBA::Exception::insertExceptionToAny RolePlaying::GameList::AlreadyRegistered::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP RolePlaying::GameList::AlreadyRegistered::insertToAnyFnNCP = 0;

RolePlaying::GameList::AlreadyRegistered::AlreadyRegistered(const RolePlaying::GameList::AlreadyRegistered &_s) : CORBA::UserException(_s) 
{
}

RolePlaying::GameList::AlreadyRegistered & RolePlaying::GameList::AlreadyRegistered::operator=(const RolePlaying::GameList::AlreadyRegistered& _s)
{
  ((CORBA::UserException*)this)->operator=(_s);
  return *this;
}

RolePlaying::GameList::AlreadyRegistered::~AlreadyRegistered() {}

void RolePlaying::GameList::AlreadyRegistered::_raise() { throw *this; }

RolePlaying::GameList::AlreadyRegistered* RolePlaying::GameList::AlreadyRegistered::_downcast(CORBA::Exception* e) {
  return (RolePlaying::GameList::AlreadyRegistered*)_NP_is_a(e,"Exception/UserException/RolePlaying_GameList_AlreadyRegistered");
}

const RolePlaying::GameList::AlreadyRegistered* RolePlaying::GameList::AlreadyRegistered::_downcast(const CORBA::Exception* e) {
  return (const RolePlaying::GameList::AlreadyRegistered*)_NP_is_a(e,"Exception/UserException/RolePlaying_GameList_AlreadyRegistered");
}

RolePlaying::GameList::AlreadyRegistered* RolePlaying::GameList::AlreadyRegistered::_narrow(CORBA::Exception* e) { return _downcast(e); }
// NOTE: deprecated function from CORBA 2.2. Should use _downcast instead.

CORBA::Exception* RolePlaying::GameList::AlreadyRegistered::_NP_duplicate() const {
  return new RolePlaying::GameList::AlreadyRegistered(*this);
}

const char* RolePlaying::GameList::AlreadyRegistered::_NP_mostDerivedTypeId() const {
  return "Exception/UserException/RolePlaying_GameList_AlreadyRegistered";
}
size_t
RolePlaying::GameList::AlreadyRegistered::NP_alignedSize(size_t _initialoffset) const
{
  size_t _msgsize = _initialoffset;
  return _msgsize;
}

void
RolePlaying::GameList::AlreadyRegistered::operator>>= (NetBufferedStream &_n) const
{
}

void
RolePlaying::GameList::AlreadyRegistered::operator<<= (NetBufferedStream &_n)
{
}

void
RolePlaying::GameList::AlreadyRegistered::operator>>= (MemBufferedStream &_n) const
{
}

void
RolePlaying::GameList::AlreadyRegistered::operator<<= (MemBufferedStream &_n)
{
}

RolePlaying::GameList::~GameList () {}

RolePlaying::_sk_GameList::~_sk_GameList () {}

RolePlaying::_proxy_GameList::~_proxy_GameList () {}

RolePlaying::_nil_GameList::~_nil_GameList () {}

RolePlaying::GameList_proxyObjectFactory::~GameList_proxyObjectFactory () {}

// Proxy call descriptor class. Mangled signature:
//  _cRolePlaying_mGameList_mGList
class _0RL_pc_385b9319d6b95da1_92000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_92000000(const char* _op, size_t _op_len) :
    OmniProxyCallDesc(_op, _op_len)  {}

  virtual void unmarshalReturnedValues(GIOP_C&);
  inline RolePlaying::GameList::GList* result() { return pd_result; }

private:
  RolePlaying::GameList::GList* pd_result;
};

void _0RL_pc_385b9319d6b95da1_92000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  pd_result = new RolePlaying::GameList::GList;
  *pd_result <<= giop_client;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cRolePlaying_mGameList_mGList
class _0RL_pc_385b9319d6b95da1_a2000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_a2000000(const char* _op, size_t _op_len, const RolePlaying::GameList::GList& arg) :
    OmniProxyCallDesc(_op, _op_len),
    _value(arg)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);

private:
  const RolePlaying::GameList::GList& _value;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_a2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = _value.NP_alignedSize(msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_a2000000::marshalArguments(GIOP_C& giop_client)
{
  _value >>= giop_client;
}

RolePlaying::GameList::GList* RolePlaying::_proxy_GameList::list()
{
  _0RL_pc_385b9319d6b95da1_92000000 _call_desc("_get_list", 10);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}


// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cRolePlaying_mGame_e_cRolePlaying_mGameList_mAlreadyRegistered
class _0RL_pc_385b9319d6b95da1_b2000000
  : public OmniProxyCallDesc
{
public:
  inline _0RL_pc_385b9319d6b95da1_b2000000(const char* _op, size_t _op_len, RolePlaying::Game_ptr _a_g) :
    OmniProxyCallDesc(_op, _op_len, 1),
    arg_g(_a_g)  {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  virtual void unmarshalReturnedValues(GIOP_C&);
  virtual void userException(GIOP_C&, const char*);
  inline char* result() { return pd_result; }

private:
  RolePlaying::Game_ptr arg_g;
  char* pd_result;
};

CORBA::ULong _0RL_pc_385b9319d6b95da1_b2000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = RolePlaying::Game_Helper::NP_alignedSize(arg_g,msgsize);
  return msgsize;
}

void _0RL_pc_385b9319d6b95da1_b2000000::marshalArguments(GIOP_C& giop_client)
{
  RolePlaying::Game_Helper::marshalObjRef(arg_g,giop_client);
}

void _0RL_pc_385b9319d6b95da1_b2000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= giop_client;
    pd_result = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
}

void _0RL_pc_385b9319d6b95da1_b2000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, RolePlaying_GameList_AlreadyRegistered_IntfRepoID) == 0 ) {
    RolePlaying::GameList::AlreadyRegistered _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

char*  RolePlaying::_proxy_GameList::_cxx_register(RolePlaying::Game_ptr  g)
{
  _0RL_pc_385b9319d6b95da1_b2000000 _call_desc("register", 9, g);

  OmniProxyCallWrapper::invoke(this, _call_desc);
  return _call_desc.result();
}



void RolePlaying::_proxy_GameList::unregister(const char*  id)
{
  _0RL_pc_385b9319d6b95da1_02000000 _call_desc("unregister", 11, id);

  OmniProxyCallWrapper::one_way(this, _call_desc);
}




CORBA::Boolean
RolePlaying::_sk_GameList::dispatch(GIOP_S &_0RL_s,const char *_0RL_op,CORBA::Boolean _0RL_response_expected)
{
  if (strcmp(_0RL_op,"_get_list") == 0)
  {
    _0RL_s.RequestReceived();
    GList_var _0RL_result = list();
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = (_0RL_result.operator->())->NP_alignedSize(_0RL_msgsize);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    *(_0RL_result.operator->()) >>= _0RL_s;
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"register") == 0)
  {
    Game_var g;
    g = Game_Helper::unmarshalObjRef(_0RL_s);
    _0RL_s.RequestReceived();
    CORBA::String_var _0RL_result;
    try {
      _0RL_result = _cxx_register(g);
    }
    catch ( RolePlaying::GameList::AlreadyRegistered &_0RL_ex) {
      size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      _0RL_msgsize = omni::align_to(_0RL_msgsize,omni::ALIGN_4);
      _0RL_msgsize += 51;
      _0RL_msgsize = _0RL_ex.NP_alignedSize(_0RL_msgsize);
      _0RL_s.InitialiseReply(GIOP::USER_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
      CORBA::ULong _len = 47;
      _len >>= _0RL_s;
      _0RL_s.put_char_array((CORBA::Char *)RolePlaying_GameList_AlreadyRegistered_IntfRepoID,47);
      _0RL_ex >>= _0RL_s;
      _0RL_s.ReplyCompleted();
      return 1;
    }
    size_t _0RL_msgsize = (size_t) GIOP_S::ReplyHeaderSize();
    _0RL_msgsize = omni::align_to(_0RL_msgsize, omni::ALIGN_4) + 4
      + (((const char*) _0RL_result) ? strlen((const char*) _0RL_result) + 1 : 1);
    _0RL_s.InitialiseReply(GIOP::NO_EXCEPTION,(CORBA::ULong)_0RL_msgsize);
    {
      CORBA::ULong _len = (((const char*) _0RL_result)? strlen((const char*) _0RL_result) + 1 : 1);
      _len >>= _0RL_s;
      if (_len > 1)
        _0RL_s.put_char_array((const CORBA::Char *)((const char*) _0RL_result),_len);
      else {
        if ((const char*) _0RL_result == 0 && omniORB::traceLevel > 1)
          _CORBA_null_string_ptr(0);
        CORBA::Char('\0') >>= _0RL_s;
      }
    }
    _0RL_s.ReplyCompleted();
    return 1;
  }
  if (strcmp(_0RL_op,"unregister") == 0)
  {
    if (_0RL_response_expected) {
      throw CORBA::BAD_OPERATION(0,CORBA::COMPLETED_NO);
    }
    CORBA::String_var id;
    {
      CORBA::String_member _0RL_str_tmp;
      _0RL_str_tmp <<= _0RL_s;
      id = _0RL_str_tmp._ptr;
      _0RL_str_tmp._ptr = 0;
    }
    _0RL_s.RequestReceived();
        unregister(id);
    _0RL_s.ReplyCompleted();
    return 1;
  }
  return 0;
}

RolePlaying::_sk_GameList::_sk_GameList (const omniORB::objectKey& k)
{
  omniRopeAndKey l(0,(CORBA::Octet*)&k,(CORBA::ULong)sizeof(k));
  setRopeAndKey(l,0);
}

omniORB::objectKey
RolePlaying::_sk_GameList::_key()
{
  omniRopeAndKey l;
  getRopeAndKey(l);
  return (*((omniORB::objectKey*)l.key()));
}

RolePlaying::GameList_ptr
RolePlaying::GameList::_duplicate(RolePlaying::GameList_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::GameList::_nil();
  CORBA::Object::_duplicate(obj);
  return obj;
}

RolePlaying::GameList_ptr
RolePlaying::GameList::_narrow(CORBA::Object_ptr obj)
{
  if (CORBA::is_nil(obj))
    return RolePlaying::GameList::_nil();
  RolePlaying::GameList_ptr e = (RolePlaying::GameList_ptr) (obj->PR_getobj()->_realNarrow(RolePlaying_GameList_IntfRepoID));
  if (e)
    return e;
  else
    return RolePlaying::GameList::_nil();
}

void *
RolePlaying::GameList::_widenFromTheMostDerivedIntf(const char *repoId,CORBA::Boolean is_cxx_type_id)
{
  if (is_cxx_type_id) return 0;
  if (!repoId)
    return (void *)((CORBA::Object_ptr)this);
  if (strcmp(RolePlaying_GameList_IntfRepoID,repoId) == 0)
    return (void *)this;
  else {
    return 0;
  }
}

CORBA::Boolean
RolePlaying::GameList::_0RL_is_a(const char *base_repoId) {
  if (strcmp(base_repoId,(const char *)RolePlaying_GameList_IntfRepoID)==0)
    return 1;
  else
    return 0;
}

RolePlaying::GameList_ptr
RolePlaying::GameList_Helper::_nil() {
  return RolePlaying::GameList::_nil();
}

CORBA::Boolean
RolePlaying::GameList_Helper::is_nil(RolePlaying::GameList_ptr p) {
  return CORBA::is_nil(p);
}

void
RolePlaying::GameList_Helper::release(RolePlaying::GameList_ptr p) {
  CORBA::release(p);
}

void
RolePlaying::GameList_Helper::duplicate(RolePlaying::GameList_ptr p) {
  CORBA::Object::_duplicate(p);
}

size_t
RolePlaying::GameList_Helper::NP_alignedSize(RolePlaying::GameList_ptr obj,size_t initialoffset) {
  return RolePlaying::GameList::NP_alignedSize(obj,initialoffset);
}

void
RolePlaying::GameList_Helper::marshalObjRef(RolePlaying::GameList_ptr obj,NetBufferedStream &s) {
  RolePlaying::GameList::marshalObjRef(obj,s);
}

RolePlaying::GameList_ptr RolePlaying::GameList_Helper::unmarshalObjRef(NetBufferedStream &s) {
  return RolePlaying::GameList::unmarshalObjRef(s);
}

void
RolePlaying::GameList_Helper::marshalObjRef(RolePlaying::GameList_ptr obj,MemBufferedStream &s) {
  RolePlaying::GameList::marshalObjRef(obj,s);
}

RolePlaying::GameList_ptr RolePlaying::GameList_Helper::unmarshalObjRef(MemBufferedStream &s) {
  return RolePlaying::GameList::unmarshalObjRef(s);
}

const char *
RolePlaying::GameList_proxyObjectFactory::irRepoId() const
{
  return (const char *)RolePlaying_GameList_IntfRepoID;
}

CORBA::Object_ptr
RolePlaying::GameList_proxyObjectFactory::newProxyObject(Rope *r,CORBA::Octet *key,size_t keysize,IOP::TaggedProfileList *profiles,CORBA::Boolean release)
{
  RolePlaying::_proxy_GameList *p = new RolePlaying::_proxy_GameList(r,key,keysize,profiles,release);
  if (!p) {
    throw CORBA::NO_MEMORY(0,CORBA::COMPLETED_NO);
  }
  return (CORBA::Object_ptr) p;
}

CORBA::Boolean
RolePlaying::GameList_proxyObjectFactory::is_a(const char *base_repoId) const
{
  return RolePlaying::GameList::_0RL_is_a(base_repoId);

}

RolePlaying::GameList_ptr
RolePlaying::GameList::_nil() {
  return RolePlaying::GameList_proxyObjectFactory::_nil();
}

static const RolePlaying::GameList_proxyObjectFactory RolePlaying_GameList_proxyObjectFactory;
RolePlaying::GameList_ptr RolePlaying::GameList_proxyObjectFactory::__nil_GameList = 0;

